#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Tue Dec 22 17:55:54 2009

import wx
import os, sys, datetime, pickle, time
import socket, threading

# begin wxGlade: extracode
# end wxGlade
class ClientCommon:

	def send_receive(self, socket_instance, msg):
		socket_instance.sendall(msg)
		#time = datetime.datetime.today().isoformat(" ")[:-7]
		#self.text_ctrl_LogMsg.AppendText(time + " >>>> " + msg + "\n")
		#frame_1.text_ctrl_LogMsg.AppendText(time + " >>>> " + msg + "\n")
		rmsg = socket_instance.recv(8000)
		#time = datetime.datetime.today().isoformat(" ")[:-7]
		#self.text_ctrl_LogMsg.AppendText(time + " <<<< " + rmsg + "\n")
		#frame_1.text_ctrl_LogMsg.AppendText(time + " <<<< " + rmsg + "\n")
		return rmsg 

	def get_image_dir(self, full_path_log_file):
		log_name = full_path_log_file.split("/")[-1]
		image_dir = full_path_log_file[:-len(log_name)]
		return image_dir
	
	def printf(self, output):
		time = datetime.datetime.today().isoformat(" ")[:-7]
		print " %s  Client ---> %s" % (time, output)
		
	def printf_send_LogMsg(self, msg):
		time = datetime.datetime.today().isoformat(" ")[:-7]
		frame_1.text_ctrl_LogMsg.AppendText(time + " Client >>>> Server :" + msg + "\n")
		
	def printf_recieve_LogMsg(self, msg):
		time = datetime.datetime.today().isoformat(" ")[:-7]
		frame_1.text_ctrl_LogMsg.AppendText(time + " Client <<<< Server : " + msg + "\n")

class SocketClient(wx.Dialog):
	def __init__(self):
		self.server_name="umic01.spring8.or.jp"	
		self.host = "10.10.126.161"
		self.port = 12345
		
	def connect(self):
		global s

		try:
			s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
			s.settimeout(10)
			s.connect((self.host, self.port))
			print " //SUER-GUI// ===> : SURF GUI has been connected to %s" % (self.host)
		except socket.error:
			msg = "SURF GUI can not bind server. Check Server"
			print " //SUER-GUI// ===> : %s " % msg 
			
			dialog = wx.MessageDialog(None, message=msg, caption="Error Message", style=wx.OK)
			if dialog.ShowModal() == wx.ID_OK:
				print "OK"
			dialog.Destroy()
			sys.exit()


class Dialog_Error_Message(wx.Dialog, ClientCommon):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Dialog_Error_Message.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.label_error_message = wx.StaticText(self, -1, "Message")
		self.static_line_5 = wx.StaticLine(self, -1)
		self.ok_button = wx.Button(self, -1, "OK")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnClose, self.ok_button)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: Dialog_Error_Message.__set_properties
		self.SetTitle("Error Dialog")
		self.label_error_message.SetMinSize((300, 100))
		self.ok_button.SetFont(wx.Font(10, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: Dialog_Error_Message.__do_layout
		sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_2.Add(self.label_error_message, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 10)
		sizer_2.Add(self.static_line_5, 0, wx.EXPAND, 0)
		sizer_2.Add(self.ok_button, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
		sizer_1.Add(sizer_2, 0, wx.EXPAND, 0)
		self.SetSizer(sizer_1)
		sizer_1.Fit(self)
		self.Layout()
		# end wxGlade

	def OnClose(self, event): # wxGlade: Dialog_Error_Message.<event_handler>
		print "Event handler `OnClose' not implemented!"
		event.Skip()

# end of class Dialog_Error_Message


class MainWindow(wx.Frame, ClientCommon):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MainWindow.__init__
		kwds["style"] = wx.ICONIZE|wx.CAPTION|wx.MINIMIZE|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.CLIP_CHILDREN
		wx.Frame.__init__(self, *args, **kwds)
		self.notebook_1 = wx.Notebook(self, -1, style=0)
		self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
		self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
		self.notebook_2 = wx.Notebook(self.notebook_1_pane_1, -1, style=0)
		self.notebook_2_pane_3 = wx.Panel(self.notebook_2, -1)
		self.notebook_2_pane_2 = wx.Panel(self.notebook_2, -1)
		self.notebook_2_pane_1 = wx.Panel(self.notebook_2, -1)
		self.notebook_LogMessage = wx.Notebook(self.notebook_1_pane_1, -1, style=0)
		self.notebook_2_pane_2_copy = wx.Panel(self.notebook_LogMessage, -1, style=wx.RAISED_BORDER|wx.TAB_TRAVERSAL)
		self.notebook_2_pane_1_copy = wx.Panel(self.notebook_LogMessage, -1, style=wx.RAISED_BORDER|wx.TAB_TRAVERSAL)
		self.sizer_17_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Job List")
		self.sizer_55_copy_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Massage")
		self.sizer_47_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Information")
		self.sizer_48_copy_copy_staticbox = wx.StaticBox(self.notebook_2_pane_1, -1, "Parameters")
		self.sizer_11_copy_1_copy_staticbox = wx.StaticBox(self.notebook_2_pane_2, -1, "cell parameters")
		self.sizer_44_staticbox = wx.StaticBox(self.notebook_2_pane_3, -1, "Scaling parameters")
		self.sizer_Action_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Action")
		self.sizer_17_copy_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "jobs on Umic")
		self.sizer_8_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Compress")
		self.sizer_8_copy_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Clean up")
		self.sizer_9_staticbox = wx.StaticBox(self.notebook_1_pane_2, -1, "Message")
		self.sizer_34_copy_copy_copy_staticbox = wx.StaticBox(self.notebook_1_pane_1, -1, "Setup")
		
		# Menu Bar
		self.frame_1_menubar = wx.MenuBar()
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.NewId(), "open job list", "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.Append(wx.NewId(), "save job list", "", wx.ITEM_NORMAL)
		wxglade_tmp_menu.Append(wx.NewId(), "exit", "", wx.ITEM_NORMAL)
		self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
		wxglade_tmp_menu = wx.Menu()
		wxglade_tmp_menu.Append(wx.NewId(), "Send Message", "", wx.ITEM_NORMAL)
		self.frame_1_menubar.Append(wxglade_tmp_menu, "Tools")
		self.SetMenuBar(self.frame_1_menubar)
		# Menu Bar end
		self.frame_1_statusbar = self.CreateStatusBar(1, 0)
		
		# Tool Bar
		self.frame_1_toolbar = wx.ToolBar(self, -1)
		self.SetToolBar(self.frame_1_toolbar)
		# Tool Bar end
		self.label_prefix = wx.StaticText(self.notebook_1_pane_1, -1, "Prefix Directory")
		self.text_ctrl_1 = wx.TextCtrl(self.notebook_1_pane_1, -1, " ----------", style=wx.TE_CENTRE)
		self.button_show_dir_list_1 = wx.Button(self.notebook_1_pane_1, -1, "...")
		self.static_line_3_copy_copy_copy_copy = wx.StaticLine(self.notebook_1_pane_1, -1, style=wx.LI_VERTICAL)
		self.list_ctrl_job_list = wx.ListCtrl(self.notebook_1_pane_1, -1, style=wx.LC_REPORT|wx.LC_SINGLE_SEL|wx.LC_VRULES|wx.SUNKEN_BORDER)
		self.button_ListCtrl_Append = wx.Button(self.notebook_1_pane_1, -1, "Append")
		self.button_ListCtrl_Delete = wx.Button(self.notebook_1_pane_1, -1, "Delete")
		self.button_ListCtrl_clear_all = wx.Button(self.notebook_1_pane_1, -1, "Clear All")
		self.button_ViewInputFile = wx.Button(self.notebook_1_pane_1, -1, "View Input")
		self.button_ViewLog = wx.Button(self.notebook_1_pane_1, -1, "View Log")
		self.button_ListCtrl_Update = wx.Button(self.notebook_1_pane_1, -1, "Update")
		self.text_ctrl_LogMsg = wx.TextCtrl(self.notebook_2_pane_1_copy, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
		self.text_ctrl_ErrorMsg = wx.TextCtrl(self.notebook_2_pane_2_copy, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
		self.label_server_name_1 = wx.StaticText(self.notebook_1_pane_1, -1, "server name :")
		self.label_server_name_2 = wx.StaticText(self.notebook_1_pane_1, -1, "?????.??????.??.??")
		self.static_line_7 = wx.StaticLine(self.notebook_1_pane_1, -1, style=wx.LI_VERTICAL)
		self.label_user_name_1 = wx.StaticText(self.notebook_1_pane_1, -1, "user name :")
		self.label_user_name_2 = wx.StaticText(self.notebook_1_pane_1, -1, "?????")
		self.label_5_copy_2_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Detector")
		self.text_ctrl_detector = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_6_copy_2_copy = wx.StaticText(self.notebook_2_pane_1, -1, "distance")
		self.text_ctrl_distance = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_5_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "osc. start")
		self.text_ctrl_osc_start = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_6_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "step")
		self.text_ctrl_step = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_5_copy_1_copy_1_copy = wx.StaticText(self.notebook_2_pane_1, -1, "beam X")
		self.text_ctrl_beamx = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_6_copy_1_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "beam Y")
		self.text_ctrl_beamy = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_5_copy_1_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "wavelength")
		self.text_ctrl_wavelength = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_7_copy_1_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Job Control")
		self.choice_1_XDS_job_control = wx.Choice(self.notebook_2_pane_1, -1, choices=["All", "CORRECT", "COLSPOT IDXREF", "IDXREF DEFPIX", "DEFPIX INTEGRATE CORRECT", "XYCORR INIT COLSPOT IDXREF DEFPIX XPLAN"])
		self.label_7_copy_2_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Integration range")
		self.label_8_copy_1_copy = wx.StaticText(self.notebook_2_pane_1, -1, "from")
		self.text_ctrl_integrate_start = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_9_copy_1_copy = wx.StaticText(self.notebook_2_pane_1, -1, "to")
		self.text_ctrl_integrate_end = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_7_copy_copy_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Resolution range")
		self.label_8_copy_copy_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "low")
		self.text_ctrl_low_resolution = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_9_copy_copy_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "high")
		self.text_ctrl_high_resolution = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_10_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "BeamLine")
		self.choice_BL = wx.Choice(self.notebook_2_pane_1, -1, choices=["BL26B1", "BL26B2", "BL32XU", "BL38B1", "BL41XU"])
		self.label_filename_temp_copy = wx.StaticText(self.notebook_2_pane_1, -1, "FIle name template")
		self.text_ctrl_XDS_filename_template = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.label_data_directory_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Data Directory")
		self.text_ctrl_image_data_dir = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.button_show_dir_list_2 = wx.Button(self.notebook_2_pane_1, -1, "...")
		self.label_data_directory_copy_copy_copy = wx.StaticText(self.notebook_2_pane_1, -1, "Output Directory")
		self.text_ctrl_output_data_dir = wx.TextCtrl(self.notebook_2_pane_1, -1, "")
		self.button_show_dir_list_3 = wx.Button(self.notebook_2_pane_1, -1, "...")
		self.static_line_2 = wx.StaticLine(self.notebook_2_pane_1, -1)
		self.buttonEditProcessParameter = wx.Button(self.notebook_2_pane_1, -1, "Edit")
		self.buttonApplyProcessParameter = wx.Button(self.notebook_2_pane_1, -1, "Apply")
		self.radio_box_unit_cell = wx.RadioBox(self.notebook_2_pane_2, -1, "", choices=["Automatic", "User defined"], majorDimension=1, style=wx.RA_SPECIFY_ROWS)
		self.label_cell_a = wx.StaticText(self.notebook_2_pane_2, -1, "a =")
		self.text_ctrl_cell_a = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_cell_b = wx.StaticText(self.notebook_2_pane_2, -1, "b =")
		self.text_ctrl_cell_b = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_cell_c = wx.StaticText(self.notebook_2_pane_2, -1, "c =")
		self.text_ctrl_cell_c = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_cell_alpha = wx.StaticText(self.notebook_2_pane_2, -1, "alpha =")
		self.text_ctrl_cell_alpha = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_cell_beta = wx.StaticText(self.notebook_2_pane_2, -1, "beta =")
		self.text_ctrl_cell_beta = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_cell_gamma = wx.StaticText(self.notebook_2_pane_2, -1, "gamma =")
		self.text_ctrl_cell_gamma = wx.TextCtrl(self.notebook_2_pane_2, -1, "")
		self.label_sg = wx.StaticText(self.notebook_2_pane_2, -1, "Beavais Lattice")
		self.choice_sg1 = wx.Choice(self.notebook_2_pane_2, -1, choices=["Automatic selection", "Primitive Triclinic", "C Centerd Monoclinic", "Primitive Monoclinic", "F Centered Orthorhombic", "I Centered Orthorhombic", "C Centered Orthorhombic", "Primitive Orthorhombic", "I Centered Tetragonal", "Primitive Tetragonal", "Primitive Hexagonal", "Primitive Rhombohedral", "F Centered Cubic", "I Centered Cubic", "Primitive Cubic"])
		self.label_sg_num = wx.StaticText(self.notebook_2_pane_2, -1, "space group number")
		self.combo_box_sgn = wx.ComboBox(self.notebook_2_pane_2, -1, choices=["0 Auto"], style=wx.CB_DROPDOWN|wx.CB_DROPDOWN)
		self.static_line_2_copy = wx.StaticLine(self.notebook_2_pane_2, -1)
		self.buttonEditUnitcell = wx.Button(self.notebook_2_pane_2, -1, "Edit")
		self.buttonApplyUnitcell = wx.Button(self.notebook_2_pane_2, -1, "Apply")
		self.label_scaling_output_dir = wx.StaticText(self.notebook_2_pane_3, -1, "Output directory")
		self.text_ctrl_scaling_output_dir_2 = wx.TextCtrl(self.notebook_2_pane_3, -1, "The function has not yet assigned.")
		self.button_show_dir_list_4 = wx.Button(self.notebook_2_pane_3, -1, "...")
		self.static_line_6 = wx.StaticLine(self.notebook_2_pane_3, -1)
		self.label_7_reso_range = wx.StaticText(self.notebook_2_pane_3, -1, "Resolution range")
		self.label_8_reso_range = wx.StaticText(self.notebook_2_pane_3, -1, "low")
		self.text_ctrl_scale_low_resolution = wx.TextCtrl(self.notebook_2_pane_3, -1, "")
		self.label_reso_range = wx.StaticText(self.notebook_2_pane_3, -1, "high")
		self.text_ctrl_scale_high_resolution = wx.TextCtrl(self.notebook_2_pane_3, -1, "")
		self.radio_box_Merge = wx.RadioBox(self.notebook_2_pane_3, -1, "MERGE option", choices=["Merged", "No Merged"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.radio_box_Fridel = wx.RadioBox(self.notebook_2_pane_3, -1, "FRIDEL'S LAW", choices=["Do not use anomalous", "Use anomalous"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.static_line_6_copy = wx.StaticLine(self.notebook_2_pane_3, -1)
		self.buttonEditScaling = wx.Button(self.notebook_2_pane_3, -1, "Edit")
		self.buttonApplyScaling = wx.Button(self.notebook_2_pane_3, -1, "apply")
		self.button_Run_process = wx.Button(self.notebook_1_pane_1, -1, "Process")
		self.button_Run_scale = wx.Button(self.notebook_1_pane_1, -1, "Scale")
		self.button_Run_Pointless = wx.Button(self.notebook_1_pane_1, -1, "Pointless")
		self.static_line_4_copy_1 = wx.StaticLine(self.notebook_1_pane_1, -1, style=wx.LI_VERTICAL)
		self.button_Run_MR = wx.Button(self.notebook_1_pane_1, -1, "MR")
		self.button_Run_sad = wx.Button(self.notebook_1_pane_1, -1, "SAD")
		self.static_line_4 = wx.StaticLine(self.notebook_1_pane_1, -1)
		self.button_Stop = wx.Button(self.notebook_1_pane_1, -1, "Stop")
		self.button_Exit = wx.Button(self.notebook_1_pane_1, -1, "Exit")
		self.list_ctrl_job_list_copy = wx.ListCtrl(self.notebook_1_pane_2, -1, style=wx.LC_REPORT|wx.LC_SINGLE_SEL|wx.LC_VRULES|wx.SUNKEN_BORDER)
		self.button_ListCtrl_update = wx.Button(self.notebook_1_pane_2, -1, "update")
		self.button_ListCtrl_kill = wx.Button(self.notebook_1_pane_2, -1, "kill")
		self.label_data_directory_copy_copy_copy_1 = wx.StaticText(self.notebook_1_pane_2, -1, "Data Directory")
		self.text_ctrl_image_data_dir_compress = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
		self.button_show_dir_list_5 = wx.Button(self.notebook_1_pane_2, -1, "...")
		self.button_Run_gzip = wx.Button(self.notebook_1_pane_2, -1, "gzip")
		self.label_data_directory_copy_copy_copy_1_copy = wx.StaticText(self.notebook_1_pane_2, -1, "Data Directory")
		self.text_ctrl_image_data_dir_clean_up = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
		self.button_show_dir_list_6 = wx.Button(self.notebook_1_pane_2, -1, "...")
		self.button_Run_CleanUp = wx.Button(self.notebook_1_pane_2, -1, "Run")
		self.label_3_MS = wx.StaticText(self.notebook_1_pane_2, -1, "input MS")
		self.text_ctrl_MS_2 = wx.TextCtrl(self.notebook_1_pane_2, -1, "")
		self.button_MS_send_copy_copy = wx.Button(self.notebook_1_pane_2, -1, "send")
		self.button_MS_clear_copy_copy = wx.Button(self.notebook_1_pane_2, -1, "Clear All")
		self.button_MS_showlist_copy_copy = wx.Button(self.notebook_1_pane_2, -1, "show MS list")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_MENU, self.OnOpenJobList, id=-1)
		self.Bind(wx.EVT_MENU, self.OnSaveJobList, id=-1)
		self.Bind(wx.EVT_MENU, self.OnExit, id=-1)
		self.Bind(wx.EVT_MENU, self.OnShowSendMsg, id=-1)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect1, self.button_show_dir_list_1)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelected, self.list_ctrl_job_list)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnDoubleClick, self.list_ctrl_job_list)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, self.list_ctrl_job_list)
		self.Bind(wx.EVT_BUTTON, self.On_LC_append, self.button_ListCtrl_Append)
		self.Bind(wx.EVT_BUTTON, self.On_LC_delete, self.button_ListCtrl_Delete)
		self.Bind(wx.EVT_BUTTON, self.On_LC_Clear_all, self.button_ListCtrl_clear_all)
		self.Bind(wx.EVT_BUTTON, self.On_LC_ViewInputFile, self.button_ViewInputFile)
		self.Bind(wx.EVT_BUTTON, self.On_LC_ShowLog, self.button_ViewLog)
		self.Bind(wx.EVT_BUTTON, self.On_LC_Update, self.button_ListCtrl_Update)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect2, self.button_show_dir_list_2)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect3, self.button_show_dir_list_3)
		self.Bind(wx.EVT_BUTTON, self.OnEditProcess, self.buttonEditProcessParameter)
		self.Bind(wx.EVT_BUTTON, self.OnApplyProcessParameters, self.buttonApplyProcessParameter)
		self.Bind(wx.EVT_RADIOBOX, self.OnShowCellParameter, self.radio_box_unit_cell)
		self.Bind(wx.EVT_CHOICE, self.OnShowSgNumber, self.choice_sg1)
		self.Bind(wx.EVT_BUTTON, self.OnEditUnitcell, self.buttonEditUnitcell)
		self.Bind(wx.EVT_BUTTON, self.OnApplyUnitcellParameters, self.buttonApplyUnitcell)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect, self.button_show_dir_list_4)
		self.Bind(wx.EVT_BUTTON, self.OnEditScale, self.buttonEditScaling)
		self.Bind(wx.EVT_BUTTON, self.OnApplyScalingParameters, self.buttonApplyScaling)
		self.Bind(wx.EVT_BUTTON, self.OnRunProcess, self.button_Run_process)
		self.Bind(wx.EVT_BUTTON, self.OnRunScale, self.button_Run_scale)
		self.Bind(wx.EVT_BUTTON, self.OnRunPointless, self.button_Run_Pointless)
		self.Bind(wx.EVT_BUTTON, self.OnRunMR, self.button_Run_MR)
		self.Bind(wx.EVT_BUTTON, self.OnRunSad, self.button_Run_sad)
		self.Bind(wx.EVT_BUTTON, self.OnRunStop, self.button_Stop)
		self.Bind(wx.EVT_BUTTON, self.OnExit, self.button_Exit)
		self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelected, self.list_ctrl_job_list_copy)
		self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnDoubleClick, self.list_ctrl_job_list_copy)
		self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnRightClick, self.list_ctrl_job_list_copy)
		self.Bind(wx.EVT_BUTTON, self.On_UmicLC_update, self.button_ListCtrl_update)
		self.Bind(wx.EVT_BUTTON, self.On_UmicLC_kill, self.button_ListCtrl_kill)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect5, self.button_show_dir_list_5)
		self.Bind(wx.EVT_BUTTON, self.OnUmicRunGzip, self.button_Run_gzip)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect6, self.button_show_dir_list_6)
		self.Bind(wx.EVT_BUTTON, self.OnUmicRunCleanUp, self.button_Run_CleanUp)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnSendMsg, self.text_ctrl_MS_2)
		self.Bind(wx.EVT_BUTTON, self.OnSendMsg, self.button_MS_send_copy_copy)
		self.Bind(wx.EVT_BUTTON, self.OnClearText, self.button_MS_clear_copy_copy)
		# end wxGlade

		# -------------- #
		#	ListCtrl	 #
		# -------------- #
		self.list_ctrl_job_list.InsertColumn(0, 'data set name', width=500)
		self.list_ctrl_job_list.InsertColumn(1, 'status', width=100)
		self.list_ctrl_job_list.InsertColumn(2, 'process id', width=100)
		self.list_ctrl_job_list.InsertColumn(3, 'output directory', width=450)

	def __set_properties(self):
		# begin wxGlade: MainWindow.__set_properties
		self.SetTitle("SURF Main Window")
		self.frame_1_statusbar.SetStatusWidths([-1])
		# statusbar fields
		frame_1_statusbar_fields = ["frame_1_statusbar"]
		for i in range(len(frame_1_statusbar_fields)):
			self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
		self.frame_1_toolbar.Realize()
		self.label_prefix.SetMinSize((110, 17))
		self.label_prefix.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_1.SetMinSize((300, 25))
		self.button_show_dir_list_1.SetMinSize((20, 25))
		self.button_show_dir_list_1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.list_ctrl_job_list.SetMinSize((670,271))
		self.button_ListCtrl_Append.SetMinSize((80, 30))
		self.button_ListCtrl_Append.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ListCtrl_Delete.SetMinSize((80, 30))
		self.button_ListCtrl_Delete.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ListCtrl_clear_all.SetMinSize((80, 30))
		self.button_ListCtrl_clear_all.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ViewInputFile.SetMinSize((80, 30))
		self.button_ViewInputFile.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ViewLog.SetMinSize((80, 30))
		self.button_ViewLog.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ListCtrl_Update.SetMinSize((160, 30))
		self.button_ListCtrl_Update.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_LogMsg.SetMinSize((670, 130))
		self.text_ctrl_LogMsg.SetBackgroundColour(wx.Colour(233, 234, 255))
		self.text_ctrl_LogMsg.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.text_ctrl_ErrorMsg.SetMinSize((470, 130))
		self.text_ctrl_ErrorMsg.SetBackgroundColour(wx.Colour(255, 233, 236))
		self.notebook_LogMessage.SetMinSize((690, 180))
		self.notebook_LogMessage.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_server_name_2.SetMinSize((150, 14))
		self.label_user_name_2.SetMinSize((150, 14))
		self.label_5_copy_2_copy.SetMinSize((80, 17))
		self.label_5_copy_2_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_detector.Enable(False)
		self.label_6_copy_2_copy.SetMinSize((60, 17))
		self.label_6_copy_2_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_distance.Enable(False)
		self.label_5_copy_copy_copy.SetMinSize((80, 17))
		self.label_5_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_osc_start.Enable(False)
		self.label_6_copy_copy_copy.SetMinSize((60, 17))
		self.label_6_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_step.Enable(False)
		self.label_5_copy_1_copy_1_copy.SetMinSize((80, 17))
		self.label_5_copy_1_copy_1_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_beamx.Enable(False)
		self.label_6_copy_1_copy_copy.SetMinSize((60, 17))
		self.label_6_copy_1_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_beamy.Enable(False)
		self.label_5_copy_1_copy_copy_copy.SetMinSize((80, 17))
		self.label_5_copy_1_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_wavelength.Enable(False)
		self.label_7_copy_1_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.choice_1_XDS_job_control.SetMinSize((300, 27))
		self.choice_1_XDS_job_control.Enable(False)
		self.choice_1_XDS_job_control.SetSelection(0)
		self.label_7_copy_2_copy.SetMinSize((110, 14))
		self.label_7_copy_2_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_8_copy_1_copy.SetMinSize((30, 14))
		self.label_8_copy_1_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_integrate_start.Enable(False)
		self.label_9_copy_1_copy.SetMinSize((30, 17))
		self.label_9_copy_1_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_integrate_end.Enable(False)
		self.label_7_copy_copy_copy_copy_copy.SetMinSize((110, 17))
		self.label_7_copy_copy_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_8_copy_copy_copy_copy_copy.SetMinSize((30, 17))
		self.label_8_copy_copy_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_low_resolution.Enable(False)
		self.label_9_copy_copy_copy_copy_copy.SetMinSize((30, 17))
		self.label_9_copy_copy_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_high_resolution.Enable(False)
		self.label_10_copy_copy.SetMinSize((110, 17))
		self.label_10_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.choice_BL.SetMinSize((100, 29))
		self.choice_BL.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.choice_BL.Enable(False)
		self.choice_BL.SetSelection(0)
		self.label_filename_temp_copy.SetMinSize((130, 17))
		self.label_filename_temp_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_XDS_filename_template.SetMinSize((200, 27))
		self.text_ctrl_XDS_filename_template.Enable(False)
		self.label_data_directory_copy_copy.SetMinSize((110, 17))
		self.label_data_directory_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_image_data_dir.SetMinSize((250, 27))
		self.text_ctrl_image_data_dir.Enable(False)
		self.button_show_dir_list_2.SetMinSize((20, 25))
		self.button_show_dir_list_2.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_show_dir_list_2.Enable(False)
		self.label_data_directory_copy_copy_copy.SetMinSize((110, 17))
		self.label_data_directory_copy_copy_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_output_data_dir.SetMinSize((250, 27))
		self.text_ctrl_output_data_dir.Enable(False)
		self.button_show_dir_list_3.SetMinSize((20, 25))
		self.button_show_dir_list_3.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_show_dir_list_3.Enable(False)
		self.buttonApplyProcessParameter.Enable(False)
		self.notebook_2_pane_1.SetMinSize((473, 554))
		self.radio_box_unit_cell.Enable(False)
		self.radio_box_unit_cell.SetSelection(0)
		self.label_cell_a.SetMinSize((65, 17))
		self.label_cell_a.SetFont(wx.Font(8, wx.DEFAULT, wx.ITALIC, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_a.SetMinSize((50, 27))
		self.text_ctrl_cell_a.Enable(False)
		self.label_cell_b.SetMinSize((65, 17))
		self.label_cell_b.SetFont(wx.Font(8, wx.DEFAULT, wx.ITALIC, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_b.SetMinSize((50, 27))
		self.text_ctrl_cell_b.Enable(False)
		self.label_cell_c.SetMinSize((65, 17))
		self.label_cell_c.SetFont(wx.Font(8, wx.DEFAULT, wx.ITALIC, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_c.SetMinSize((50, 27))
		self.text_ctrl_cell_c.Enable(False)
		self.label_cell_alpha.SetMinSize((65, 17))
		self.label_cell_alpha.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_alpha.SetMinSize((50, 27))
		self.text_ctrl_cell_alpha.Enable(False)
		self.label_cell_beta.SetMinSize((65, 17))
		self.label_cell_beta.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_beta.SetMinSize((50, 27))
		self.text_ctrl_cell_beta.Enable(False)
		self.label_cell_gamma.SetMinSize((65, 17))
		self.label_cell_gamma.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.text_ctrl_cell_gamma.SetMinSize((50, 27))
		self.text_ctrl_cell_gamma.Enable(False)
		self.label_sg.SetMinSize((140, 17))
		self.label_sg.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.choice_sg1.Enable(False)
		self.choice_sg1.SetSelection(0)
		self.label_sg_num.SetMinSize((140, 17))
		self.label_sg_num.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, ""))
		self.combo_box_sgn.SetMinSize((100, 29))
		self.combo_box_sgn.Enable(False)
		self.combo_box_sgn.SetSelection(-1)
		self.buttonApplyUnitcell.Enable(False)
		self.label_scaling_output_dir.Enable(False)
		self.text_ctrl_scaling_output_dir_2.SetMinSize((300, 30))
		self.text_ctrl_scaling_output_dir_2.Enable(False)
		self.button_show_dir_list_4.SetMinSize((20, 25))
		self.button_show_dir_list_4.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_show_dir_list_4.Enable(False)
		self.label_7_reso_range.SetMinSize((110, 17))
		self.label_7_reso_range.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_8_reso_range.SetMinSize((30, 17))
		self.label_8_reso_range.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_scale_low_resolution.Enable(False)
		self.label_reso_range.SetMinSize((30, 17))
		self.label_reso_range.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_scale_high_resolution.Enable(False)
		self.radio_box_Merge.Enable(False)
		self.radio_box_Merge.SetSelection(0)
		self.radio_box_Fridel.Enable(False)
		self.radio_box_Fridel.SetSelection(0)
		self.buttonApplyScaling.Enable(False)
		self.notebook_2_pane_3.Enable(False)
		self.button_Run_process.SetMinSize((70, 40))
		self.button_Run_process.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_scale.SetMinSize((70, 40))
		self.button_Run_scale.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_Pointless.SetMinSize((70, 40))
		self.button_Run_Pointless.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_MR.SetMinSize((55, 40))
		self.button_Run_MR.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_MR.Enable(False)
		self.button_Run_sad.SetMinSize((55, 40))
		self.button_Run_sad.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_sad.Enable(False)
		self.button_Stop.SetMinSize((95, 40))
		self.button_Stop.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Exit.SetMinSize((210, 40))
		self.button_Exit.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.list_ctrl_job_list_copy.SetMinSize((670,270))
		self.button_ListCtrl_update.SetMinSize((80, 30))
		self.button_ListCtrl_update.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_ListCtrl_kill.SetMinSize((80, 30))
		self.button_ListCtrl_kill.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_data_directory_copy_copy_copy_1.SetMinSize((110, 17))
		self.label_data_directory_copy_copy_copy_1.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_image_data_dir_compress.SetMinSize((400, 27))
		self.button_show_dir_list_5.SetMinSize((20, 25))
		self.button_show_dir_list_5.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_gzip.SetMinSize((105, 40))
		self.button_Run_gzip.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_data_directory_copy_copy_copy_1_copy.SetMinSize((110, 17))
		self.label_data_directory_copy_copy_copy_1_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.text_ctrl_image_data_dir_clean_up.SetMinSize((400, 27))
		self.button_show_dir_list_6.SetMinSize((20, 25))
		self.button_show_dir_list_6.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_Run_CleanUp.SetMinSize((105, 40))
		self.button_Run_CleanUp.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.label_3_MS.SetMinSize((110, 18))
		self.text_ctrl_MS_2.SetMinSize((300, 30))
		self.button_MS_send_copy_copy.SetMinSize((80, 30))
		self.button_MS_clear_copy_copy.SetMinSize((80, 30))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MainWindow.__do_layout
		sizer_29 = wx.BoxSizer(wx.VERTICAL)
		sizer_6 = wx.BoxSizer(wx.VERTICAL)
		sizer_9 = wx.StaticBoxSizer(self.sizer_9_staticbox, wx.HORIZONTAL)
		sizer_8_copy = wx.StaticBoxSizer(self.sizer_8_copy_staticbox, wx.HORIZONTAL)
		sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_17_copy_copy_copy = wx.StaticBoxSizer(self.sizer_17_copy_copy_copy_staticbox, wx.VERTICAL)
		sizer_18_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_18_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_34 = wx.BoxSizer(wx.VERTICAL)
		sizer_Action = wx.StaticBoxSizer(self.sizer_Action_staticbox, wx.HORIZONTAL)
		sizer_40_copy_copy_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_43_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_44 = wx.StaticBoxSizer(self.sizer_44_staticbox, wx.HORIZONTAL)
		sizer_45 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_26_copy_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_33_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_27_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_51_copy_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_46 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_11_copy_1_copy = wx.StaticBoxSizer(self.sizer_11_copy_1_copy_staticbox, wx.HORIZONTAL)
		sizer_12_copy_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_39_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_23_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_15_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_14_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_13_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_24_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_48_copy_copy = wx.StaticBoxSizer(self.sizer_48_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_49_copy_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_39_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_6_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_6_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_53_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_51_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_51_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_11_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_50_copy_1_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_50_copy_1_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_50_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_50_copy_2_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_32 = wx.BoxSizer(wx.VERTICAL)
		sizer_47 = wx.StaticBoxSizer(self.sizer_47_staticbox, wx.HORIZONTAL)
		sizer_48 = wx.BoxSizer(wx.VERTICAL)
		sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_17 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_55_copy = wx.StaticBoxSizer(self.sizer_55_copy_staticbox, wx.HORIZONTAL)
		sizer_57_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_56_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_39_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_17_copy_copy = wx.StaticBoxSizer(self.sizer_17_copy_copy_staticbox, wx.VERTICAL)
		sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_18_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_31_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_34_copy_copy_copy = wx.StaticBoxSizer(self.sizer_34_copy_copy_copy_staticbox, wx.HORIZONTAL)
		sizer_35_copy_copy_copy = wx.BoxSizer(wx.VERTICAL)
		sizer_36_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_36_copy_copy_copy.Add(self.label_prefix, 0, wx.ALL, 10)
		sizer_36_copy_copy_copy.Add(self.text_ctrl_1, 0, wx.ALL, 10)
		sizer_36_copy_copy_copy.Add(self.button_show_dir_list_1, 0, wx.ALL, 10)
		sizer_36_copy_copy_copy.Add(self.static_line_3_copy_copy_copy_copy, 0, 0, 0)
		sizer_35_copy_copy_copy.Add(sizer_36_copy_copy_copy, 0, 0, 0)
		sizer_34_copy_copy_copy.Add(sizer_35_copy_copy_copy, 0, 0, 0)
		sizer_31_copy_copy_copy.Add(sizer_34_copy_copy_copy, 0, wx.LEFT|wx.RIGHT|wx.TOP, 10)
		sizer_32.Add(sizer_31_copy_copy_copy, 0, 0, 0)
		sizer_18_copy_copy.Add(self.list_ctrl_job_list, 1, wx.ALL|wx.EXPAND, 10)
		sizer_17_copy_copy.Add(sizer_18_copy_copy, 0, 0, 0)
		sizer_18.Add(self.button_ListCtrl_Append, 0, wx.ALL, 10)
		sizer_18.Add(self.button_ListCtrl_Delete, 0, wx.ALL, 10)
		sizer_18.Add(self.button_ListCtrl_clear_all, 0, wx.ALL, 10)
		sizer_18.Add(self.button_ViewInputFile, 0, wx.ALL, 10)
		sizer_18.Add(self.button_ViewLog, 0, wx.ALL, 10)
		sizer_18.Add(self.button_ListCtrl_Update, 0, wx.ALL|wx.EXPAND, 10)
		sizer_17_copy_copy.Add(sizer_18, 1, 0, 0)
		sizer_39_copy_copy.Add(sizer_17_copy_copy, 0, wx.ALL, 10)
		sizer_32.Add(sizer_39_copy_copy, 0, 0, 10)
		sizer_56_copy.Add(self.text_ctrl_LogMsg, 0, wx.ALL|wx.EXPAND, 2)
		self.notebook_2_pane_1_copy.SetSizer(sizer_56_copy)
		sizer_57_copy.Add(self.text_ctrl_ErrorMsg, 1, wx.ALL, 2)
		self.notebook_2_pane_2_copy.SetSizer(sizer_57_copy)
		self.notebook_LogMessage.AddPage(self.notebook_2_pane_1_copy, "Log Message")
		self.notebook_LogMessage.AddPage(self.notebook_2_pane_2_copy, "Error Message")
		sizer_55_copy.Add(self.notebook_LogMessage, 0, wx.ALL|wx.EXPAND, 2)
		sizer_17.Add(sizer_55_copy, 0, wx.ALL|wx.EXPAND, 10)
		sizer_32.Add(sizer_17, 0, 0, 0)
		sizer_49.Add(self.label_server_name_1, 0, wx.ALL, 10)
		sizer_49.Add(self.label_server_name_2, 0, wx.ALL, 10)
		sizer_49.Add(self.static_line_7, 0, wx.EXPAND, 0)
		sizer_49.Add(self.label_user_name_1, 0, wx.ALL, 10)
		sizer_49.Add(self.label_user_name_2, 0, wx.ALL, 10)
		sizer_48.Add(sizer_49, 1, wx.EXPAND, 0)
		sizer_47.Add(sizer_48, 1, wx.EXPAND, 0)
		sizer_32.Add(sizer_47, 0, wx.ALL|wx.EXPAND, 10)
		sizer_31.Add(sizer_32, 0, 0, 0)
		sizer_50_copy_2_copy.Add(self.label_5_copy_2_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_2_copy.Add(self.text_ctrl_detector, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_2_copy.Add(self.label_6_copy_2_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_2_copy.Add(self.text_ctrl_distance, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_50_copy_2_copy, 0, wx.EXPAND, 0)
		sizer_50_copy_copy_copy.Add(self.label_5_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_copy_copy.Add(self.text_ctrl_osc_start, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_copy_copy.Add(self.label_6_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_copy_copy.Add(self.text_ctrl_step, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_50_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_50_copy_1_copy_1_copy.Add(self.label_5_copy_1_copy_1_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_1_copy_1_copy.Add(self.text_ctrl_beamx, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_1_copy_1_copy.Add(self.label_6_copy_1_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_50_copy_1_copy_1_copy.Add(self.text_ctrl_beamy, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_50_copy_1_copy_1_copy, 0, wx.EXPAND, 0)
		sizer_50_copy_1_copy_copy_copy.Add(self.label_5_copy_1_copy_copy_copy, 0, wx.ALL, 10)
		sizer_50_copy_1_copy_copy_copy.Add(self.text_ctrl_wavelength, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_50_copy_1_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_11_copy_copy.Add(self.label_7_copy_1_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_11_copy_copy.Add(self.choice_1_XDS_job_control, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_11_copy_copy, 0, wx.EXPAND, 0)
		sizer_51_copy_1_copy.Add(self.label_7_copy_2_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_1_copy.Add(self.label_8_copy_1_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_1_copy.Add(self.text_ctrl_integrate_start, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_1_copy.Add(self.label_9_copy_1_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_1_copy.Add(self.text_ctrl_integrate_end, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_51_copy_1_copy, 0, wx.EXPAND, 0)
		sizer_51_copy_copy_copy_copy_copy.Add(self.label_7_copy_copy_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy.Add(self.label_8_copy_copy_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy.Add(self.text_ctrl_low_resolution, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy.Add(self.label_9_copy_copy_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy.Add(self.text_ctrl_high_resolution, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_51_copy_copy_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_53_copy_copy.Add(self.label_10_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_53_copy_copy.Add(self.choice_BL, 0, wx.LEFT|wx.TOP, 10)
		sizer_49_copy_copy.Add(sizer_53_copy_copy, 0, wx.EXPAND, 0)
		sizer_7_copy.Add(self.label_filename_temp_copy, 0, wx.ALL, 10)
		sizer_7_copy.Add(self.text_ctrl_XDS_filename_template, 0, wx.ALL, 10)
		sizer_49_copy_copy.Add(sizer_7_copy, 0, wx.EXPAND, 0)
		sizer_6_copy_copy.Add(self.label_data_directory_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_6_copy_copy.Add(self.text_ctrl_image_data_dir, 0, wx.LEFT|wx.TOP, 10)
		sizer_6_copy_copy.Add(self.button_show_dir_list_2, 0, wx.ALL, 10)
		sizer_49_copy_copy.Add(sizer_6_copy_copy, 0, wx.EXPAND, 0)
		sizer_6_copy_copy_copy.Add(self.label_data_directory_copy_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_6_copy_copy_copy.Add(self.text_ctrl_output_data_dir, 0, wx.LEFT|wx.TOP, 10)
		sizer_6_copy_copy_copy.Add(self.button_show_dir_list_3, 0, wx.ALL, 10)
		sizer_49_copy_copy.Add(sizer_6_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_49_copy_copy.Add(self.static_line_2, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 10)
		sizer_39_copy.Add(self.buttonEditProcessParameter, 1, wx.ALL, 10)
		sizer_39_copy.Add(self.buttonApplyProcessParameter, 1, wx.ALL, 10)
		sizer_49_copy_copy.Add(sizer_39_copy, 0, wx.EXPAND, 0)
		sizer_48_copy_copy.Add(sizer_49_copy_copy, 0, 0, 0)
		sizer_35.Add(sizer_48_copy_copy, 0, wx.ALL, 10)
		self.notebook_2_pane_1.SetSizer(sizer_35)
		sizer_24_copy_copy.Add(self.radio_box_unit_cell, 0, wx.ALL, 10)
		sizer_12_copy_copy.Add(sizer_24_copy_copy, 0, 0, 0)
		sizer_13_copy_copy.Add(self.label_cell_a, 0, wx.LEFT|wx.TOP, 10)
		sizer_13_copy_copy.Add(self.text_ctrl_cell_a, 0, wx.TOP, 10)
		sizer_13_copy_copy.Add(self.label_cell_b, 0, wx.LEFT|wx.TOP, 10)
		sizer_13_copy_copy.Add(self.text_ctrl_cell_b, 0, wx.TOP, 10)
		sizer_13_copy_copy.Add(self.label_cell_c, 0, wx.LEFT|wx.TOP, 10)
		sizer_13_copy_copy.Add(self.text_ctrl_cell_c, 0, wx.RIGHT|wx.TOP, 10)
		sizer_12_copy_copy.Add(sizer_13_copy_copy, 0, 0, 0)
		sizer_14_copy_copy.Add(self.label_cell_alpha, 0, wx.LEFT|wx.TOP, 10)
		sizer_14_copy_copy.Add(self.text_ctrl_cell_alpha, 0, wx.TOP, 10)
		sizer_14_copy_copy.Add(self.label_cell_beta, 0, wx.LEFT|wx.TOP, 10)
		sizer_14_copy_copy.Add(self.text_ctrl_cell_beta, 0, wx.TOP, 10)
		sizer_14_copy_copy.Add(self.label_cell_gamma, 0, wx.LEFT|wx.TOP, 10)
		sizer_14_copy_copy.Add(self.text_ctrl_cell_gamma, 0, wx.RIGHT|wx.TOP, 10)
		sizer_12_copy_copy.Add(sizer_14_copy_copy, 0, wx.EXPAND, 0)
		sizer_15_copy_copy.Add(self.label_sg, 0, wx.ALL, 10)
		sizer_15_copy_copy.Add(self.choice_sg1, 0, wx.ALL, 10)
		sizer_12_copy_copy.Add(sizer_15_copy_copy, 0, 0, 0)
		sizer_23_copy_copy.Add(self.label_sg_num, 0, wx.ALL, 10)
		sizer_23_copy_copy.Add(self.combo_box_sgn, 0, wx.ALL, 10)
		sizer_12_copy_copy.Add(sizer_23_copy_copy, 0, 0, 0)
		sizer_12_copy_copy.Add(self.static_line_2_copy, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 10)
		sizer_39_copy_1.Add(self.buttonEditUnitcell, 1, wx.ALL, 10)
		sizer_39_copy_1.Add(self.buttonApplyUnitcell, 1, wx.ALL, 10)
		sizer_12_copy_copy.Add(sizer_39_copy_1, 1, wx.EXPAND, 0)
		sizer_11_copy_1_copy.Add(sizer_12_copy_copy, 0, 0, 0)
		sizer_36.Add(sizer_11_copy_1_copy, 0, wx.ALL, 10)
		self.notebook_2_pane_2.SetSizer(sizer_36)
		sizer_28_copy_copy.Add(self.label_scaling_output_dir, 0, wx.ALL, 10)
		sizer_26_copy_copy.Add(sizer_28_copy_copy, 0, wx.EXPAND, 0)
		sizer_46.Add(self.text_ctrl_scaling_output_dir_2, 0, wx.ALL, 10)
		sizer_46.Add(self.button_show_dir_list_4, 0, wx.ALL, 10)
		sizer_26_copy_copy.Add(sizer_46, 0, wx.EXPAND, 0)
		sizer_26_copy_copy.Add(self.static_line_6, 0, wx.EXPAND, 0)
		sizer_51_copy_copy_copy_copy_copy_copy.Add(self.label_7_reso_range, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy_copy.Add(self.label_8_reso_range, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy_copy.Add(self.text_ctrl_scale_low_resolution, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy_copy.Add(self.label_reso_range, 0, wx.LEFT|wx.TOP, 10)
		sizer_51_copy_copy_copy_copy_copy_copy.Add(self.text_ctrl_scale_high_resolution, 0, wx.LEFT|wx.TOP, 10)
		sizer_26_copy_copy.Add(sizer_51_copy_copy_copy_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_27_copy_copy.Add(self.radio_box_Merge, 1, wx.ALL, 10)
		sizer_27_copy_copy.Add(self.radio_box_Fridel, 1, wx.ALL, 10)
		sizer_26_copy_copy.Add(sizer_27_copy_copy, 0, wx.EXPAND, 0)
		sizer_26_copy_copy.Add(self.static_line_6_copy, 0, wx.EXPAND, 0)
		sizer_33_copy_copy.Add(self.buttonEditScaling, 1, wx.ALL, 10)
		sizer_33_copy_copy.Add(self.buttonApplyScaling, 1, wx.ALL, 10)
		sizer_26_copy_copy.Add(sizer_33_copy_copy, 0, wx.EXPAND, 0)
		sizer_45.Add(sizer_26_copy_copy, 0, wx.EXPAND, 0)
		sizer_44.Add(sizer_45, 0, wx.ALL, 10)
		sizer_43.Add(sizer_44, 0, wx.ALL, 10)
		self.notebook_2_pane_3.SetSizer(sizer_43)
		self.notebook_2.AddPage(self.notebook_2_pane_1, "Parameter")
		self.notebook_2.AddPage(self.notebook_2_pane_2, "Unit Cell")
		self.notebook_2.AddPage(self.notebook_2_pane_3, "Scaling")
		sizer_34.Add(self.notebook_2, 0, wx.LEFT|wx.RIGHT|wx.TOP, 30)
		sizer_43_copy_copy_copy.Add(self.button_Run_process, 1, wx.ALL, 10)
		sizer_43_copy_copy_copy.Add(self.button_Run_scale, 1, wx.ALL, 10)
		sizer_43_copy_copy_copy.Add(self.button_Run_Pointless, 1, wx.ALL, 10)
		sizer_43_copy_copy_copy.Add(self.static_line_4_copy_1, 0, wx.EXPAND, 0)
		sizer_43_copy_copy_copy.Add(self.button_Run_MR, 0, wx.ALL, 10)
		sizer_43_copy_copy_copy.Add(self.button_Run_sad, 0, wx.ALL, 10)
		sizer_40_copy_copy_copy.Add(sizer_43_copy_copy_copy, 0, 0, 0)
		sizer_40_copy_copy_copy.Add(self.static_line_4, 0, wx.EXPAND, 0)
		sizer_39.Add(self.button_Stop, 0, wx.ALL, 10)
		sizer_39.Add(self.button_Exit, 1, wx.ALL|wx.EXPAND, 10)
		sizer_40_copy_copy_copy.Add(sizer_39, 0, 0, 0)
		sizer_Action.Add(sizer_40_copy_copy_copy, 0, wx.BOTTOM, 10)
		sizer_34.Add(sizer_Action, 0, wx.ALL|wx.ALIGN_RIGHT, 30)
		sizer_20.Add(sizer_34, 0, 0, 0)
		sizer_31.Add(sizer_20, 1, 0, 0)
		sizer_30.Add(sizer_31, 0, wx.EXPAND, 0)
		self.notebook_1_pane_1.SetSizer(sizer_30)
		sizer_18_copy_copy_copy.Add(self.list_ctrl_job_list_copy, 1, wx.ALL|wx.EXPAND, 10)
		sizer_17_copy_copy_copy.Add(sizer_18_copy_copy_copy, 0, 0, 0)
		sizer_18_copy.Add(self.button_ListCtrl_update, 0, wx.ALL, 10)
		sizer_18_copy.Add(self.button_ListCtrl_kill, 0, wx.ALL, 10)
		sizer_17_copy_copy_copy.Add(sizer_18_copy, 1, wx.ALIGN_RIGHT, 0)
		sizer_7.Add(sizer_17_copy_copy_copy, 0, wx.ALL, 10)
		sizer_6.Add(sizer_7, 0, wx.EXPAND, 0)
		sizer_8.Add(self.label_data_directory_copy_copy_copy_1, 0, wx.LEFT|wx.TOP, 10)
		sizer_8.Add(self.text_ctrl_image_data_dir_compress, 0, wx.LEFT|wx.TOP, 10)
		sizer_8.Add(self.button_show_dir_list_5, 0, wx.ALL, 10)
		sizer_8.Add(self.button_Run_gzip, 0, wx.ALL, 10)
		sizer_6.Add(sizer_8, 0, wx.ALL, 10)
		sizer_8_copy.Add(self.label_data_directory_copy_copy_copy_1_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_8_copy.Add(self.text_ctrl_image_data_dir_clean_up, 0, wx.LEFT|wx.TOP, 10)
		sizer_8_copy.Add(self.button_show_dir_list_6, 0, wx.ALL, 10)
		sizer_8_copy.Add(self.button_Run_CleanUp, 0, wx.ALL, 10)
		sizer_6.Add(sizer_8_copy, 0, wx.ALL, 10)
		sizer_9.Add(self.label_3_MS, 0, wx.ALL, 10)
		sizer_9.Add(self.text_ctrl_MS_2, 0, wx.TOP|wx.BOTTOM, 10)
		sizer_9.Add(self.button_MS_send_copy_copy, 0, wx.TOP, 10)
		sizer_9.Add(self.button_MS_clear_copy_copy, 0, wx.TOP, 10)
		sizer_9.Add(self.button_MS_showlist_copy_copy, 0, wx.LEFT|wx.TOP, 10)
		sizer_6.Add(sizer_9, 0, wx.ALL, 10)
		self.notebook_1_pane_2.SetSizer(sizer_6)
		self.notebook_1.AddPage(self.notebook_1_pane_1, "Data analysis")
		self.notebook_1.AddPage(self.notebook_1_pane_2, "Umi cluster control")
		sizer_29.Add(self.notebook_1, 0, 0, 0)
		self.SetSizer(sizer_29)
		sizer_29.Fit(self)
		sizer_29.SetSizeHints(self)
		self.Layout()
		self.Centre()
		# end wxGlade

	def OnExit(self, event): # wxGlade: MainWindow.<event_handler>
		msg = "KILL/ME"
		rmsg = self.send_receive(s, msg)
		
		try:
			if rmsg == "disconnected":
				self.Close()
				sys.exit()
			else:
				event.Skip()

		except socket.error:
			print "SocketError"
			self.Close()
			sys.exit()
			
		except NameError:
			print "NameError"
			self.Close()
			sys.exit() 

	def OnShowSendMsg(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnShowSendMsg' not implemented!"
		event.Skip()

	def OnFileSelect1(self, event): # wxGlade: MainWindow.<event_handler>
		dir_name = self.file_select_org()
		self.text_ctrl_1.SetValue(dir_name)

	def OnListSelected(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		dic_LC = self.__get_parameters_from_LC(index)
		dic_server = self.__get_parameters_from_server(dic_LC["dir_name"])
		self.__panel_update(dic_server)
		self.__LC_update(index, dic_server)
		
		
	def __get_parameters_from_LC(self, index):
		self.printf("index %d is called during the function of __get_parameters_from_LC()" % index)
		dic = {}
		
		self.selected_log_file_name = self.list_ctrl_job_list.GetItemText(index)
		
		dic["total_number_column"] = self.list_ctrl_job_list.GetColumnCount()
		
		list_item = []
		for n in range(dic["total_number_column"]):
			list_item.append(self.list_ctrl_job_list.GetItem(index, n))
		
		dic["image_name"] = list_item[0].GetText()
		dic["status"]	 = list_item[1].GetText()
		dic["process_id"] = list_item[2].GetText()
		dic["dir_name"]   = list_item[3].GetText()
		dic["total_number_row"] = self.list_ctrl_job_list.GetItemCount()
		
		#print " //SUER-GUI// ===> : column 0 : %s, column 1 : %s, column 2: %s" % (dic["image_name"], dic["status"], dic["process_id"])
		#print " //SUER-GUI// ===> : Now total %s column and %s items in the list" % (dic["total_number_column"], dic["total_number_row"])
		print dic
		
		return dic
		
	def __get_parameters_from_server(self, dir_name):
		
		cnt = 0
		
		while True:
			if cnt == 100:
				self.printf("__get_parameters_form_server() 100 time fail, break")
				dic = {}
				return dic
			
				break
			try:
				msg = "GET/PARAMETER/%s" % dir_name
				self.printf(msg)
				rmsg = self.send_receive(s, msg)
				self.printf(pickle.loads(rmsg))
				dic = pickle.loads(rmsg)
				return dic
			
				break
			
			except TypeError:  # <-- when server return list object
				self.printf("__get_parameters_form_server() fail")
				cnt +=  1
				time.sleep(1)
				
			except:
				self.printf("__get_parameters_form_server() fail")
				cnt +=  1
				time.sleep(1)
		
	def __panel_update(self, dic):
		self.set_parameters_to_panel(dic)
		
		if int(dic["editor_flag"]) == 0:
			self.__Disable_ProcessParameters()
			self.__Disable_Unitcell()
		elif int(dic["editor_flag"]) == 1:
			self.__Able_ProcessParameters()
			self.__Able_Unitcell()
		else:
			print "editor_flag error"
			
		
		

	def OnDoubleClick(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnDoubleClick' not implemented!"
		event.Skip()

	def OnRightClick(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnRightClick' not implemented!"
		event.Skip()

	def On_LC_append(self, event): # wxGlade: MainWindow.<event_handler>
		if not (self.text_ctrl_1.GetValue()) == " ----------":
			cwd = self.text_ctrl_1.GetValue()	 # <--- set root directory
		else:
			cwd = os.getcwd()
			
		# --------------------------------- #
		#  show directory selection dialog  #
		# --------------------------------- #
		
		dialog = wx.DirDialog(None, message="Choose a file", defaultPath=cwd)
		if dialog.ShowModal() == wx.ID_OK:
			dir_name = dialog.GetPath()
		dialog.Destroy()
		
		try:
			msg = "GET/BSSLOG/%s" % dir_name
			rmsg = self.send_receive(s, msg)
		except:
			rmsg = "Not selected"
		
		if rmsg == "Not selected":
			pass
		
		elif not rmsg == "NULL":
			rmsg = pickle.loads(rmsg)
			list = []
			for line in rmsg:
				if line == "imgview.log":
					pass
				else:
					line = line[:-4] + "_******.img"
					list.append(line)
				
			# ----------------------------------- #
			#  show single file selection dialog  #
			# ----------------------------------- #
			
			dialog = Dialog_Selection(dir_name, list, None, -1)
			dialog.Show()
			
			
			#dialog = wx.SingleChoiceDialog(None, message="select a data set", caption="Single Choice", choices=list)
			#if dialog.ShowModal() == wx.ID_OK:
			#	full_name = dir_name + "/" + dialog.GetStringSelection()
			#	
			#	msg = "PREPARE/PROCESS/%s" % (full_name[:-11]+".log")
			#	rmsg = self.send_receive(s, msg)
			#	
			#	dic = pickle.loads(rmsg)
			#	self.append_list_ctrl(dic)
			#	self.set_parameters_to_panel(dic)
			#dialog.Destroy() 
			
		else:
			msg = "No image file !!"
			dialog = wx.MessageDialog(None, message=msg, caption="Error Message", style=wx.OK)
			if dialog.ShowModal() == wx.ID_OK:
				print "OK"
			dialog.Destroy()
			
			

	def On_LC_delete(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		self.list_ctrl_job_list.DeleteItem(index)

	def On_LC_Clear_all(self, event): # wxGlade: MainWindow.<event_handler>
		self.list_ctrl_job_list.ClearAll()

	def On_LC_ViewInputFile(self, event): # wxGlade: MainWindow.<event_handler>
		list = ["test", "1", "e"]
		dialog = wx.SingleChoiceDialog(None, message="test", caption="test", choices=list)
		if dialog.ShowModal() == wx.ID_OK:
			return dialog.GetStringSelection()
		dialog.Destroy()

	def On_LC_ShowLog(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		
		if index !=-1:
			self.__show_submit_log(index)
		else:
			msg = "select a data set, first !!"
			dialog = wx.MessageDialog(None, message=msg, caption="Error Message", style=wx.OK)
			if dialog.ShowModal() == wx.ID_OK:
				print "OK"
			dialog.Destroy()
			
	def __show_submit_log(self, index):
		dic_LC = self.__get_parameters_from_LC(index)
		dir_name = dic_LC["dir_name"]
		
		msg = "GET/SUBMITTION_LOG/%s" % dir_name
		rmsg = self.send_receive(s, msg)
		
		list = pickle.loads(rmsg)
		
		
		try:
			title = "Single file selection"
			msg = "select a log file"
			dialog = wx.SingleChoiceDialog(None, message=msg, caption=title, choices=list)
			if dialog.ShowModal() == wx.ID_OK:
				file_name = dir_name + dialog.GetStringSelection()
			dialog.Destroy()
		except TypeError:
			pass
		
		try:
			Log_dialog = Dialog_LogView(file_name, None, -1)
			Log_dialog.Show()
		except UnboundLocalError:
			pass
		
	def On_LC_Update(self, event): # wxGlade: MainWindow.<event_handler>
		total_index = self.list_ctrl_job_list.GetItemCount()
		
		for index in range(total_index):
			dic = self.__get_parameters_from_LC(index)
			dir_name = dic["dir_name"] 
			dic_server = self.__get_parameters_from_server(dir_name)
			self.__LC_update(index, dic_server)

	def OnFileSelect2(self, event): # wxGlade: MainWindow.<event_handler>
		dir_name = self.file_select_org()
		self.text_ctrl_image_data_dir.SetValue(dir_name)

	def OnFileSelect3(self, event): # wxGlade: MainWindow.<event_handler>
		dir_name = self.file_select_org()
		self.text_ctrl_output_data_dir.SetValue(dir_name)

	def OnEditProcess(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			self.__Able_ProcessParameters()
		
	def __Able_ProcessParameters(self):
		self.text_ctrl_detector.Enable(False)
		self.text_ctrl_distance.Enable(True)
		self.text_ctrl_osc_start.Enable(True)
		self.text_ctrl_step.Enable(True)
		self.text_ctrl_beamx.Enable(False)
		self.text_ctrl_beamy.Enable(False)
		self.text_ctrl_wavelength.Enable(True)
		self.choice_1_XDS_job_control.Enable(True)
		self.text_ctrl_integrate_start.Enable(True)
		self.text_ctrl_integrate_end.Enable(True)
		self.text_ctrl_low_resolution.Enable(True)
		self.text_ctrl_high_resolution.Enable(True)
		self.choice_BL.Enable(True)
		self.text_ctrl_XDS_filename_template.Enable(True)
		self.text_ctrl_image_data_dir.Enable(True)
		self.button_show_dir_list_2.Enable(True)
		self.text_ctrl_output_data_dir.Enable(True)
		self.button_show_dir_list_3.Enable(True)
		self.buttonApplyProcessParameter.Enable(True)
	
	def __Disable_ProcessParameters(self):
		self.text_ctrl_detector.Enable(False)
		self.text_ctrl_distance.Enable(False)
		self.text_ctrl_osc_start.Enable(False)
		self.text_ctrl_step.Enable(False)
		self.text_ctrl_beamx.Enable(False)
		self.text_ctrl_beamy.Enable(False)
		self.text_ctrl_wavelength.Enable(False)
		self.choice_1_XDS_job_control.Enable(False)
		self.text_ctrl_integrate_start.Enable(False)
		self.text_ctrl_integrate_end.Enable(False)
		self.text_ctrl_low_resolution.Enable(False)
		self.text_ctrl_high_resolution.Enable(False)
		self.choice_BL.Enable(False)
		self.text_ctrl_XDS_filename_template.Enable(False)
		self.text_ctrl_image_data_dir.Enable(False)
		self.button_show_dir_list_2.Enable(False)
		self.text_ctrl_output_data_dir.Enable(False)
		self.button_show_dir_list_3.Enable(False)
		self.buttonApplyProcessParameter.Enable(False)
		
	def OnShowCellParameter(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnShowCellParameter' not implemented!"
		event.Skip()

	def OnShowSgNumber(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnShowSgNumber' not implemented!"
		event.Skip()

	def OnEditUnitcell(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			self.__Able_Unitcell()
		
	def __Able_Unitcell(self):
		self.radio_box_unit_cell.Enable(True)
		self.text_ctrl_cell_a.Enable(True)
		self.text_ctrl_cell_b.Enable(True)
		self.text_ctrl_cell_c.Enable(True)
		self.text_ctrl_cell_alpha.Enable(True)
		self.text_ctrl_cell_beta.Enable(True)
		self.text_ctrl_cell_gamma.Enable(True)
		self.choice_sg1.Enable(True)
		self.combo_box_sgn.Enable(True)
		self.buttonApplyUnitcell.Enable(True)

	def __Disable_Unitcell(self):
		self.radio_box_unit_cell.Enable(False)
		self.text_ctrl_cell_a.Enable(False)
		self.text_ctrl_cell_b.Enable(False)
		self.text_ctrl_cell_c.Enable(False)
		self.text_ctrl_cell_alpha.Enable(False)
		self.text_ctrl_cell_beta.Enable(False)
		self.text_ctrl_cell_gamma.Enable(False)
		self.choice_sg1.Enable(False)
		self.combo_box_sgn.Enable(False)
		self.buttonApplyUnitcell.Enable(False)
		
	def OnFileSelect(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnFileSelect' not implemented!"
		event.Skip()

	def OnEditScale(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			self.__Able_Scale_parameter()
			
	def __Able_Scale_parameter(self):
		self.label_scaling_output_dir.Enable(True)
		self.text_ctrl_scaling_output_dir_2.Enable(True)
		self.button_show_dir_list_4.Enable(True)
		self.text_ctrl_scale_low_resolution.Enable(True)
		self.text_ctrl_scale_high_resolution.Enable(True)
		self.radio_box_Merge.Enable(True)
		self.radio_box_Fridel.Enable(True)
		self.buttonApplyScaling.Enable(True)

	def OnClose(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnClose' not implemented!"
		event.Skip()

	# --------- #
	#  process  #
	# --------- #
	def OnRunProcess(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			program_name = self.__get_next_program_name(index)
			if program_name == "XDS":
				self.__submit_process_and_scale(index)
		else:
			self.__choose_a_data_set()
			
	def __submit_process_and_scale(self, index): 
		dic = self.__get_parameters_from_LC(index)
		dir_name = dic["dir_name"] 
		msg = "EXECUTE/PROCESS/%s" %dir_name
		rmsg = self.send_receive(s, msg)
		
		
		
	# --------- #
	#   scale   #
	# --------- #
	def OnRunScale(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			program_name = self.__get_next_program_name(index)
			if program_name == "Scala":
				self.__run_scala(index)
		else:
			self.__choose_a_data_set()
			
	def __run_scala(self, index):
		dic = self.__get_parameters_from_LC(index)
		dir_name = dic["dir_name"] 
		msg = "EXECUTE/SCALA/%s" %dir_name
		rmsg = self.send_receive(s, msg)
			
			
	# ------------ #
	#   pointless  #
	# ------------ #
	def OnRunPointless(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		if index != -1:
			program_name = self.__get_next_program_name(index)
			if program_name == "Pointless":
				self.__run_pointless(index)
		else:
			self.__choose_a_data_set()
			
	def __run_pointless(self, index):
		dic = self.__get_parameters_from_LC(index)
		dir_name = dic["dir_name"] 
		msg = "EXECUTE/POINTLESS/%s" %dir_name
		rmsg = self.send_receive(s, msg)
			
		
	# -------- #
	#  common  #
	# -------- #
	
	def __choose_a_data_set(self):
		msg =  "Choose a data set First!"
		dialog = wx.MessageDialog(None, message=msg, caption="Error Message", style=wx.OK)
		if dialog.ShowModal() == wx.ID_OK:
			print "OK"
		dialog.Destroy()
		
	# --------------- #
	# -- subprocess --#
	# --------------- #
	def __watch_job_status_and_update_LC(self, index, dir_name):
		dic_server = self.__get_parameters_from_server(dir_name)
		self.__LC_update(index, dic_server)
		
		
		# ----------------------- #
		# ----- main loop ------- #
		# ----------------------- #
		
		while True:
			time.sleep(3)
			dic_server = self.__get_parameters_from_server(dir_name)
			#self.printf("Now status is watching. Job status is : %s" % dic_server["job_status"])
			if dic_server["job_status"] == 'finish': 
				break
			elif dic_server["job_status"] == 'xds success':
				break
			elif dic_server["job_status"] == 'pointless success':
				break
			elif dic_server["job_status"] == 'scala success':
				break
			elif dic_server["job_status"] == 'failure':
				break
		
		# --- main loop end ----- #
		
		
		if dic_server["job_status"] == 'failure':
			self.printf("surf has tried to processing using XDS for 5 times")
			self.__LC_update(index, dic_server)
		elif int(dic_server["xds_flag"]) < 0:
			self.printf("rerun XDS, number of try : %s" % dic_server["number_of_xds_retry"])
			self.__run_process_and_scale(index)
		elif int(dic_server["xds_flag"]) > 0:
			XDS_ASCII_HKL = dir_name + "/" + "XDS_ASCII.HKL"   # <-- use a pointless judgment
			if (os.access(XDS_ASCII_HKL, os.R_OK)) and (dic_server["program"] == "pointless"):
				self.printf("Finish Processing. Pointless will be submitted")
				self.__run_pointless(index)
			elif (dic_server["program"] == "scala") and (dic_server["job_status"] == 'pointless success'):
				self.printf("Finish Pointles. Scala will be submitted")
				self.__run_scala(index)
			elif  dic_server["job_status"] == "scala success":
				self.printf("Finish  Scala")
				
		self.list_ctrl_job_list.SetStringItem(index, 1, dic_server["job_status"])
		self.printf("xds flag is %s" % dic_server["xds_flag"])
		
			
	def __get_next_program_name(self, index):
		dic = self.__get_parameters_from_LC(index)
		dir_name = dic["dir_name"] 
		dic_server = self.__get_parameters_from_server(dir_name)
		
		if dic_server["job_status"] == 'failure':
			self.printf("surf has tried to processing using XDS for 5 times")
			self.__LC_update(index, dic_server)
		elif int(dic_server["xds_flag"]) < 0:
			self.printf("rerun XDS, number of try : %s" % dic_server["number_of_xds_retry"])
			return "XDS"
		elif int(dic_server["xds_flag"]) > 0:
			XDS_ASCII_HKL = dir_name + "/" + "XDS_ASCII.HKL"   # <-- use a pointless judgment
			if (os.access(XDS_ASCII_HKL, os.R_OK)) and (dic_server["program"] == "pointless"):
				self.printf("Finish Processing. Pointless will be submitted")
				return "Pointless"
			elif (dic_server["program"] == "scala") and (dic_server["job_status"] == 'pointless success'):
				self.printf("Finish Pointles. Scala will be submitted")
				return "Scala"
			elif  dic_server["job_status"] == "scala success":
				self.printf("Finish  Scala")
				return "End"
		else:
			return "None"
		
	def __LC_update(self,index, dic):
		self.list_ctrl_job_list.SetStringItem(index, 1, dic["job_status"])
		self.list_ctrl_job_list.SetStringItem(index, 2, dic["process_id"])
		

	def OnRunScaling(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnRunScaling' not implemented!"
		event.Skip()

	def OnRunMR(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnRunMR' not implemented!"
		event.Skip()

	def OnRunSad(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnRunSad' not implemented!"
		event.Skip()

	def OnRunStop(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnRunStop' not implemented!"
		event.Skip()

	def OnStatusUpdate(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnStatusUpdate' not implemented!"
		event.Skip()

	def On_UmicLC_update(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `On_UmicLC_update' not implemented!"
		event.Skip()

	def On_UmicLC_kill(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `On_UmicLC_kill' not implemented!"
		event.Skip()

	def OnFileSelect5(self, event): # wxGlade: MainWindow.<event_handler>
		dir_name = self.file_select_org()
		self.text_ctrl_image_data_dir_compress.SetValue(dir_name)

	def OnUmicRunGzip(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnUmicRunGzip' not implemented!"
		event.Skip()

	def OnFileSelect6(self, event): # wxGlade: MainWindow.<event_handler>
		dir_name = self.file_select_org()
		self.text_ctrl_image_data_dir_clean_up.SetValue(dir_name)
		
	def OnUmicRunCleanUp(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnUmicRunCleanUp' not implemented!"
		event.Skip()

	def OnSendMsg(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnSendMsg' not implemented!"
		event.Skip()

	def OnClearText(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnClearText' not implemented!"
		event.Skip()

	def Dir_select_org(self):
		dialog = wx.DirDialog(None, message="Choose a directory", defaultPath=os.getcwd())
		if dialog.ShowModal() == wx.ID_OK:
			return dialog.GetPath()
		dialog.Destroy()
		
	def file_select_org(self):
		dialog = wx.DirDialog(None, message="Choose a file", defaultPath=os.getcwd())
		if dialog.ShowModal() == wx.ID_OK:
			return dialog.GetPath()
		dialog.Destroy()
		
	def set_parameters_to_panel(self, dictionary):
		self.text_ctrl_detector.SetValue(dictionary["DETECTOR"])
		self.text_ctrl_distance.SetValue(dictionary["cameralength"])
		self.text_ctrl_osc_start.SetValue(dictionary["scan_from"])
		self.text_ctrl_step.SetValue(dictionary["scan_step"])
		self.text_ctrl_wavelength.SetValue(dictionary["wavelength"])
		self.text_ctrl_integrate_start.SetValue(dictionary["integration_start"])
		self.text_ctrl_integrate_end.SetValue(dictionary["integration_end"])
		self.text_ctrl_low_resolution.SetValue(dictionary["low_resolution_limit"])
		self.text_ctrl_high_resolution.SetValue(dictionary["high_resolution_limit"])
		self.text_ctrl_scale_low_resolution.SetValue(dictionary["scale_low_resolution_limit"])
		self.text_ctrl_scale_high_resolution.SetValue(dictionary["scale_high_resolution_limit"])
		self.text_ctrl_XDS_filename_template.SetValue(dictionary["FILE_NAME"])
		self.text_ctrl_image_data_dir.SetValue(dictionary["DATA_DIRECTORY"])
		self.text_ctrl_output_data_dir.SetValue(dictionary["OUTPUT_DIRECTORY"])
		self.text_ctrl_cell_a.SetValue(dictionary["cell_a"])
		self.text_ctrl_cell_b.SetValue(dictionary["cell_b"])
		self.text_ctrl_cell_c.SetValue(dictionary["cell_c"])
		self.text_ctrl_cell_alpha.SetValue(dictionary["cell_alpha"])
		self.text_ctrl_cell_beta.SetValue(dictionary["cell_beta"])
		self.text_ctrl_cell_gamma.SetValue(dictionary["cell_gamma"])
		
		if dictionary["Beamline"]  == "BL26B1":
			self.choice_BL.SetSelection(0)
		elif dictionary["Beamline"]  == "BL26B2":
			self.choice_BL.SetSelection(1)
		elif dictionary["Beamline"]  == "BL32XU":
			self.choice_BL.SetSelection(2)
		elif dictionary["Beamline"]  == "BL38B1":
			self.choice_BL.SetSelection(3)
		elif dictionary["Beamline"]  == "BL41XU":
			self.choice_BL.SetSelection(4)
			
		index = self.list_ctrl_job_list.GetFocusedItem()
		self.list_ctrl_job_list.SetStringItem(index, 1, dictionary["job_status"])
		self.list_ctrl_job_list.SetStringItem(index, 2, dictionary["process_id"])
			
	def get_parameters_from_panel(self):
		new_dic = {}
		new_dic["DETECTOR"] = self.text_ctrl_detector.GetValue()
		new_dic["cameralength"] = self.text_ctrl_distance.GetValue()
		new_dic["scan_from"] = self.text_ctrl_osc_start.GetValue()
		new_dic["scan_step"] = self.text_ctrl_step.GetValue()
		new_dic["wavelength"] = self.text_ctrl_wavelength.GetValue()
		new_dic["integration_start"] = self.text_ctrl_integrate_start.GetValue()
		new_dic["integration_end"] = self.text_ctrl_integrate_end.GetValue()
		new_dic["low_resolution_limit"] = self.text_ctrl_low_resolution.GetValue()
		new_dic["high_resolution_limit"] = self.text_ctrl_high_resolution.GetValue()
		new_dic["scale_low_resolution_limit"] = self.text_ctrl_scale_low_resolution.GetValue()
		new_dic["scale_high_resolution_limit"] = self.text_ctrl_scale_high_resolution.GetValue()
		new_dic["FILE_NAME"] = self.text_ctrl_XDS_filename_template.GetValue()
		new_dic["DATA_DIRECTORY"] = self.text_ctrl_image_data_dir.GetValue()
		new_dic["OUTPUT_DIRECTORY"] = self.text_ctrl_output_data_dir.GetValue()
		new_dic["cell_a"] = self.text_ctrl_cell_a.GetValue()
		new_dic["cell_b"] = self.text_ctrl_cell_b.GetValue()
		new_dic["cell_c"] = self.text_ctrl_cell_c.GetValue()
		new_dic["cell_alpha"] = self.text_ctrl_cell_alpha.GetValue()
		new_dic["cell_beta"] = self.text_ctrl_cell_beta.GetValue()
		new_dic["cell_gamma"] = self.text_ctrl_cell_gamma.GetValue()
		new_dic["editor_flag"] = 1
		
		num = self.choice_BL.GetSelection()
		if num  == 0:
			new_dic["Beamline"]  = "BL26B1"
		elif  num == 1:
			new_dic["Beamline"]  = "BL26B2"
		elif num == 2:
			new_dic["Beamline"]  = "BL32XU"
		elif num == 3:
			new_dic["Beamline"]  = "BL38B1"
		elif num == 4:
			new_dic["Beamline"]  = "BL41XU"
			
		return new_dic
			
		
	def append_list_ctrl(self, dictionary):
		num_items = self.list_ctrl_job_list.GetItemCount()
		file_name = dictionary["FILE_NAME_TEMPLATE"][:-4] + "_******.img"
		self.list_ctrl_job_list.InsertStringItem(num_items, dictionary["DATA_DIRECTORY"] + file_name)
		self.list_ctrl_job_list.SetStringItem(num_items, 1, dictionary["job_status"])
		self.list_ctrl_job_list.SetStringItem(num_items, 2, dictionary["process_id"])   
		self.list_ctrl_job_list.SetStringItem(num_items, 3, dictionary["OUTPUT_DIRECTORY"]) 
		
		
	def OnApplyProcessParameters(self, event): # wxGlade: MainWindow.<event_handler>
		index = self.list_ctrl_job_list.GetFocusedItem()
		
		dic1 = self.__get_parameters_from_LC(index)
		dic2 = self.get_parameters_from_panel()
		dic2["INITIALIZED_DIRECTORY"] = dic1["dir_name"]
		dic2["job_status"] =  "modified"
		msg = "CHANGE/PARAM/%s" % (pickle.dumps(dic2))
		rmsg = self.send_receive(s, msg)
		
		self.list_ctrl_job_list.SetStringItem(index, 1, "modified")
		self.list_ctrl_job_list.SetStringItem(index, 3, dic2["OUTPUT_DIRECTORY"])
		

	def OnApplyUnitcellParameters(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnApplyUnitcellParameters' not implemented"
		event.Skip()

	def OnApplyScalingParameters(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnApplyScalingParameters' not implemented"
		event.Skip()

	def OnOpenJobList(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnOpenJobList' not implemented"
		event.Skip()

	def OnSaveJobList(self, event): # wxGlade: MainWindow.<event_handler>
		print "Event handler `OnSaveJobList' not implemented"
		event.Skip()


# end of class MainWindow


class Dialog_Error_Massage(wx.Dialog):
	def __init__(self, *args, **kwds):
		# content of this block not found: did you rename this class?
		pass

	def __set_properties(self):
		# content of this block not found: did you rename this class?
		pass

	def __do_layout(self):
		# content of this block not found: did you rename this class?
		pass

	def OnClose(self, event): # wxGlade: Dialog_Error_Massage.<event_handler>
		print "Event handler `OnClose' not implemented!"
		event.Skip()

# end of class Dialog_Error_Massage


class Dialog_Selection(wx.Dialog, ClientCommon):
	def __init__(self, dir, list, *args, **kwds):
		# begin wxGlade: Dialog_Selection.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.label_1_copy = wx.StaticText(self, -1, "Select a data set")
		self.list_box_1 = wx.ListBox(self, -1, choices=[], style=wx.LB_SINGLE)
		self.static_line_3 = wx.StaticLine(self, -1)
		self.label_1 = wx.StaticText(self, -1, "Output directory")
		self.text_ctrl_2 = wx.TextCtrl(self, -1, "")
		self.button_1 = wx.Button(self, -1, "...")
		self.static_line_3_copy = wx.StaticLine(self, -1)
		self.button_2 = wx.Button(self, -1, "apply")
		self.button_2_copy = wx.Button(self, -1, "cancel")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_LISTBOX_DCLICK, self.OnListFocased, self.list_box_1)
		self.Bind(wx.EVT_LISTBOX, self.OnListFocased, self.list_box_1)
		self.Bind(wx.EVT_BUTTON, self.OnFileSelect, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnApply, self.button_2)
		self.Bind(wx.EVT_BUTTON, self.OnClose, self.button_2_copy)
		# end wxGlade
		
		self.list = list
		self.dir = dir
		self.new_dir = dir
		self.__append_list(self.list)
		self.text_ctrl_2.SetValue(self.dir)

	def __set_properties(self):
		# begin wxGlade: Dialog_Selection.__set_properties
		self.SetTitle("Selection")
		self.list_box_1.SetMinSize((300, 100))
		self.text_ctrl_2.SetMinSize((330, 28))
		self.button_1.SetMinSize((35, 30))
		self.button_2.SetMinSize((189,40))
		self.button_2.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		self.button_2_copy.SetMinSize((190, 40))
		self.button_2_copy.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.NORMAL, 0, "Sans"))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: Dialog_Selection.__do_layout
		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4.Add(self.label_1_copy, 0, wx.ALL, 10)
		sizer_4.Add(self.list_box_1, 0, wx.ALL|wx.EXPAND, 5)
		sizer_4.Add(self.static_line_3, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 10)
		sizer_10.Add(self.label_1, 0, wx.ALL, 10)
		sizer_4.Add(sizer_10, 0, wx.EXPAND, 0)
		sizer_11.Add(self.text_ctrl_2, 0, wx.ALL|wx.EXPAND, 10)
		sizer_11.Add(self.button_1, 0, wx.ALL|wx.EXPAND, 10)
		sizer_4.Add(sizer_11, 0, wx.EXPAND, 0)
		sizer_4.Add(self.static_line_3_copy, 0, wx.TOP|wx.BOTTOM|wx.EXPAND, 10)
		sizer_5.Add(self.button_2, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
		sizer_5.Add(self.button_2_copy, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 10)
		sizer_4.Add(sizer_5, 0, wx.EXPAND, 0)
		sizer_3.Add(sizer_4, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_3)
		sizer_3.Fit(self)
		self.Layout()
		# end wxGlade

	def OnApply(self, event): # wxGlade: Dialog_Selection.<event_handler>
		if self.list_box_1.GetSelection() != -1:
			log_filename = self.list_box_1.GetStringSelection()[:-11] + ".log"
			full_name = self.dir + "/" + log_filename
			self.new_dir = self.text_ctrl_2.GetValue()
			output_dir = self.new_dir
		
			dic = {}
			dic["log_file_name"] = full_name
			dic["OUTPUT_DIRECTORY"] = output_dir
		
			msg = "PREPARE/PROCESS/%s" % (pickle.dumps(dic))
			rmsg = self.send_receive(s, msg)
			
			dic = pickle.loads(rmsg)
			frame_1.append_list_ctrl(dic)
		
			self.Close()
		
		else:
			msg = "Select a date set !!"
			dialog = wx.MessageDialog(None, message=msg, caption="Error Message", style=wx.OK)
			if dialog.ShowModal() == wx.ID_OK:
				print "OK"
			dialog.Destroy()
			
	def OnClose(self, event): # wxGlade: Dialog_Selection.<event_handler>
		self.Close()
		
	def __append_list(self, list):
		for line in list:
			self.list_box_1.Append(line)

	def OnListFocased(self, event): # wxGlade: Dialog_Selection.<event_handler>
		log_name = self.list_box_1.GetStringSelection()[:-11] + ".log"

	def OnFileSelect(self, event): # wxGlade: Dialog_Selection.<event_handler>
		try:
			dialog = wx.DirDialog(None, message="Choose a directory", defaultPath=self.text_ctrl_2.GetValue())
		except:
			dialog = wx.DirDialog(None, message="Choose a directory", defaultPath=os.getcwd())
			
		if dialog.ShowModal() == wx.ID_OK:
			self.new_dir = dialog.GetPath()
			self.text_ctrl_2.SetValue(self.new_dir)
		dialog.Destroy()

# end of class Dialog_Selection


class Dialog_LogView(wx.Dialog):
	def __init__(self, file_name, *args, **kwds):
		# begin wxGlade: Dialog_LogView.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.text_ctrl_log = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY|wx.HSCROLL|wx.TE_RICH)
		self.button_4 = wx.Button(self, -1, "Close")
		self.button_3 = wx.Button(self, -1, "Update")

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnClose, self.button_4)
		self.Bind(wx.EVT_BUTTON, self.OnLogViewUpdate, self.button_3)
		# end wxGlade
		
		self.file_in = file_name
		self.file_size = os.path.getsize(self.file_in)
		
		tmp_file = open(self.file_in, "r")
		line_list = tmp_file.readlines()
		self.last_index = len(line_list) -1
		self.__append_lines(line_list[5:self.last_index])
		tmp_file.close()

	def __set_properties(self):
		# begin wxGlade: Dialog_LogView.__set_properties
		self.SetTitle("Log View")
		self.text_ctrl_log.SetMinSize((800, 400))
		self.text_ctrl_log.SetFont(wx.Font(8, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
		self.button_3.SetMinSize((150, 34))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: Dialog_LogView.__do_layout
		sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_19 = wx.BoxSizer(wx.VERTICAL)
		sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_19.Add(self.text_ctrl_log, 0, wx.ALL, 5)
		sizer_22.Add(self.button_4, 0, wx.ALL, 10)
		sizer_22.Add(self.button_3, 0, wx.ALL|wx.ALIGN_RIGHT, 10)
		sizer_19.Add(sizer_22, 1, wx.EXPAND, 0)
		sizer_16.Add(sizer_19, 1, wx.EXPAND, 0)
		self.SetSizer(sizer_16)
		sizer_16.Fit(self)
		self.Layout()
		# end wxGlade
		
		
	def __update_text(self, in_file):
		file_size = os.path.getsize(self.file_in)
		
		if file_size > self.file_size:
			tmp_file = open(self.file_in, "r")
			line_list = tmp_file.readlines()
			last_index = len(line_list) -1
			self.__append_lines(line_list[self.last_index:last_index])
										  
			tmp_file.close()
			self.file_size = file_size
			self.last_index = last_index
			
	def __append_lines(self, list):
		for line in list:
			self.text_ctrl_log.AppendText(line)

	def OnClose(self, event): # wxGlade: Dialog_LogView.<event_handler>
		self.Close()

	def OnLogViewUpdate(self, event): # wxGlade: Dialog_LogView.<event_handler>
		self.__update_text(self.file_in)
		


# end of class Dialog_LogView


class Dialog_LogGraph(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: Dialog_LogGraph.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
		wx.Dialog.__init__(self, *args, **kwds)

		self.__set_properties()
		self.__do_layout()
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: Dialog_LogGraph.__set_properties
		self.SetTitle("LogGraph")
		self.SetSize((565, 689))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: Dialog_LogGraph.__do_layout
		self.Layout()
		# end wxGlade

# end of class Dialog_LogGraph


if __name__ == "__main__":
	app = wx.PySimpleApp(0)
	SocketClient().connect()
		#raise SocketError, "Can not establish a connection to Surf server. Is Surver program running ?"
		#sys.exit()
		
	wx.InitAllImageHandlers()
	frame_1 = MainWindow(None, -1, "")
	app.SetTopWindow(frame_1)
	frame_1.Show()
	app.MainLoop()

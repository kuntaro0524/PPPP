#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Jul 25 21:11:35 2010

import wx
import sys
sys.path.append("/data/03.Sacla/SSSS/BLctrl")
from Gonio import *
from File import *
from MyException import *
from Crystal import *


class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("frame_1")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_26 = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer_26)
        sizer_26.Fit(self)
        self.Layout()
        # end wxGlade

# end of class MyFrame


class ExpCondDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ExpCondDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_5 = wx.StaticText(self, -1, "Directory", style=wx.ALIGN_CENTRE)
        self.text_ctrl_1 = wx.TextCtrl(self, -1, "")
        self.label_5_copy = wx.StaticText(self, -1, "Data name", style=wx.ALIGN_CENTRE)
        self.text_ctrl_1_copy = wx.TextCtrl(self, -1, "")
        self.label_5_copy_copy = wx.StaticText(self, -1, "Start serial", style=wx.ALIGN_CENTRE)
        self.text_ctrl_1_copy_copy = wx.TextCtrl(self, -1, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ExpCondDialog.__set_properties
        self.SetTitle("dialog_1")
        self.label_5.SetMinSize((100, 18))
        self.text_ctrl_1.SetMinSize((200, 25))
        self.label_5_copy.SetMinSize((100, 25))
        self.text_ctrl_1_copy.SetMinSize((100, 25))
        self.label_5_copy_copy.SetMinSize((74, 18))
        self.text_ctrl_1_copy_copy.SetMinSize((100, 25))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ExpCondDialog.__do_layout
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_16_copy_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_16.Add(self.label_5, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
        sizer_16.Add(self.text_ctrl_1, 0, 0, 0)
        sizer_14.Add(sizer_16, 0, wx.EXPAND, 0)
        sizer_16_copy_4.Add(self.label_5_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16_copy_4.Add(self.text_ctrl_1_copy, 0, 0, 0)
        sizer_16_copy_4.Add(self.label_5_copy_copy, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_16_copy_4.Add(self.text_ctrl_1_copy_copy, 0, 0, 0)
        sizer_14.Add(sizer_16_copy_4, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_14)
        sizer_14.Fit(self)
        self.Layout()
        # end wxGlade

# end of class ExpCondDialog

class MyFrame2(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MyFrame2.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.button_9 = wx.Button(self, -1, "pushQuit")
        self.appendButton = wx.Button(self, -1, "Append")
        self.deleteButton = wx.Button(self, -1, "Delete")
        self.clearAllButton = wx.Button(self, -1, "Clear All")
        self.button_6_copy = wx.Button(self, -1, "Save the list to file")
        self.sizer_3_staticbox = wx.StaticBox(self, -1, "Action")
        self.label_1_copy = wx.StaticText(self, -1, "Explanation of the point")
        self.inputComment = wx.TextCtrl(self, -1, "")
        self.sizer_8_staticbox = wx.StaticBox(self, -1, "Comment")
        self.list_ctrl_1 = wx.ListCtrl(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.button_6 = wx.Button(self, -1, "Move to the selected")
        self.sizer_7_staticbox = wx.StaticBox(self, -1, "LIST")
        self.sizer_6_copy_staticbox = wx.StaticBox(self, -1, "List")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.pushQuit, self.button_9)
        self.Bind(wx.EVT_BUTTON, self.OnAppend, self.appendButton)
        self.Bind(wx.EVT_BUTTON, self.Ondelete, self.deleteButton)
        self.Bind(wx.EVT_BUTTON, self.OnClearAll, self.clearAllButton)
        self.Bind(wx.EVT_BUTTON, self.saveGlistToFile, self.button_6_copy)
        self.Bind(wx.EVT_LIST_INSERT_ITEM, self.OnListInsertItem, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelected, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnDobleClick, self.list_ctrl_1)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.OnListColClick, self.list_ctrl_1)
        self.Bind(wx.EVT_BUTTON, self.moveToSelected, self.button_6)
        # end wxGlade

        # Kuntaro definition
        self.list_ctrl_1.InsertColumn(0,"GonioX",width=100)
        self.list_ctrl_1.InsertColumn(1,"GonioY",width=100)
        self.list_ctrl_1.InsertColumn(2,"GonioZ",width=100)
        self.list_ctrl_1.InsertColumn(3,"Comment",width=200)
        self.sacla=False
        self.gonio_list=[]
        self.selected=-1
	self.att_index=0
	self.att_thickness=0.0

	# Advanced off at start

        # kuntaro classes
        host = '172.28.112.5'
        port = 10101
        self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.s.connect((host,port))

        self.gonio=Gonio(self.s)

    def __set_properties(self):
        # begin wxGlade: MyFrame2.__set_properties
        self.SetTitle("KUMA system")
        self.button_9.SetBackgroundColour(wx.Colour(255, 69, 10))
        self.button_9.SetForegroundColour(wx.Colour(0, 0, 0))
        self.appendButton.SetMinSize((117, 32))
        self.deleteButton.SetMinSize((117, 32))
        self.clearAllButton.SetMinSize((117, 32))
        self.button_6_copy.SetMinSize((117, 32))
        self.label_1_copy.SetMinSize((156, 25))
        self.inputComment.SetMinSize((200, 25))
        self.list_ctrl_1.SetMinSize((300,200))
        self.button_6.SetMinSize((150, 32))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame2.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        self.sizer_6_copy_staticbox.Lower()
        sizer_6_copy = wx.StaticBoxSizer(self.sizer_6_copy_staticbox, wx.HORIZONTAL)
        self.sizer_7_staticbox.Lower()
        sizer_7 = wx.StaticBoxSizer(self.sizer_7_staticbox, wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer_8_staticbox.Lower()
        sizer_8 = wx.StaticBoxSizer(self.sizer_8_staticbox, wx.HORIZONTAL)
        self.sizer_3_staticbox.Lower()
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.VERTICAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_17.Add(self.button_9, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.ADJUST_MINSIZE, 0)
        sizer_5.Add(sizer_17, 0, wx.EXPAND, 0)
        sizer_3.Add(self.appendButton, 0, wx.ALL, 10)
        sizer_3.Add(self.deleteButton, 0, wx.ALL, 10)
        sizer_3.Add(self.clearAllButton, 0, wx.ALL, 10)
        sizer_3.Add(self.button_6_copy, 0, wx.ALL, 10)
        sizer_6_copy.Add(sizer_3, 0, wx.ALL|wx.EXPAND, 10)
        sizer_8.Add(self.label_1_copy, 0, 0, 0)
        sizer_8.Add(self.inputComment, 0, 0, 0)
        sizer_7.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_7.Add(self.list_ctrl_1, 3, wx.ALL|wx.EXPAND, 10)
        sizer_13.Add((200, 20), 0, 0, 0)
        sizer_13.Add(self.button_6, 0, 0, 0)
        sizer_7.Add(sizer_13, 0, wx.EXPAND, 0)
        sizer_6_copy.Add(sizer_7, 1, wx.EXPAND, 0)
        sizer_5.Add(sizer_6_copy, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_5)
        sizer_5.Fit(self)
        self.Layout()
        # end wxGlade

    def upButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=float(self.distBox.GetValue())
        self.gonio.moveUpDown(dist)
        self.transUpdate()

    def leftButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist= -float(self.distBox.GetValue())
        self.gonio.moveTrans(dist)
        self.transUpdate()

    def rightButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist= float(self.distBox.GetValue())
        self.gonio.moveTrans(dist)
        self.transUpdate()

    def downButton(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=-float(self.distBox.GetValue())
        self.gonio.moveUpDown(dist)
        self.transUpdate()

    def pintPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=float(self.distBox.GetValue())
        self.gonio.movePint(dist)
        self.transUpdate()

    def pintMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        dist=-float(self.distBox.GetValue())
        self.gonio.movePint(dist)
        self.transUpdate()

    def reversePhiPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=180.0
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiPlus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=float(self.phiBox.GetValue())
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-float(self.phiBox.GetValue())
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def reversePhiMinus(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-180.0
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def updateGonio(self, event): # wxGlade: MyFrame2.<event_handler>
	self.transUpdate()

    def seleOrigin(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispOriVec.SetValue(str)

		self.gv.setOrigVec(xmm,ymm,zmm)

    def seleVert(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispVertVec.SetValue(str)
		self.gv.setVertVec(xmm,ymm,zmm)

    def seleHori(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		str="%8.4f %8.4f %8.4f"%(xmm,ymm,zmm)
		self.dispHoriVec.SetValue(str)
		self.gv.setHoriVec(xmm,ymm,zmm)

    def inputStepH(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `inputStepH' not implemented!"
        event.Skip()

    def OnAppend(self, event): # wxGlade: MyFrame2.<event_handler>
        phi="%8.2f"%self.gonio.getPhi()
        gx="%8.4f"%self.gonio.getXmm()
        gy="%8.4f"%self.gonio.getYmm()
        gz="%8.4f"%self.gonio.getZmm()

        code=(phi,gx,gy,gz)
        self.gonio_list.insert(0,code)

        # get comment
        comment=self.inputComment.GetValue()

        self.list_ctrl_1.InsertStringItem(0,gx)
        self.list_ctrl_1.SetStringItem(0,1,gy)
        self.list_ctrl_1.SetStringItem(0,2,gz)
        self.list_ctrl_1.SetStringItem(0,3,comment)

    def Ondelete(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                self.list_ctrl_1.DeleteItem(self.selected)
                del self.gonio_list[self.selected]
                print self.gonio_list
                self.selected=-1

        if len(self.gonio_list)==0:
                self.selected=-1

    def OnClearAll(self, event): # wxGlade: MyFrame2.<event_handler>
        self.list_ctrl_1.DeleteAllItems()
        self.gonio_list=[]
        self.selected=-1

    def OnListInsertItem(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnListInsertItem' not implemented!"
        event.Skip()

    def OnListSelected(self, event): # wxGlade: MyFrame2.<event_handler>
        self.selected=event.m_itemIndex

    def OnDobleClick(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnDobleClick' not implemented!"
        event.Skip()

    def OnListColClick(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `OnListColClick' not implemented!"
        event.Skip()

    def moveToSelected(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

                self.gonio.moveXYZmm(xmm,ymm,zmm)

    def transUpdate(self):
        phi="%8.2f"%self.gonio.getPhi()
        gx="%8.4f"%self.gonio.getXmm()
        gy="%8.4f"%self.gonio.getYmm()
        gz="%8.4f"%self.gonio.getZmm()

        self.currPhi.SetValue(phi)
        self.currGonioX.SetValue(gx)
        self.currGonioY.SetValue(gy)
        self.currGonioZ.SetValue(gz)


    def pushSetPhi(self, event): # wxGlade: MyFrame2.<event_handler>
	phistart=self.gonio.getPhi()
	phistep=float(self.oscStepBox.GetValue())
	phiend=phistart+phistep

	startstr="%8.2f"%phistart
	endstr="%8.2f"%phiend

	self.oscStartBox.SetValue(startstr)
	self.oscEndBox.SetValue(endstr)

    def pushSetVec1(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xstr="%8.4f"%xmm
		ystr="%8.4f"%ymm
		zstr="%8.4f"%zmm


    def pushSetVec2(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xstr="%8.4f"%xmm
		ystr="%8.4f"%ymm
		zstr="%8.4f"%zmm


    def getScheduleParams(self):
	dir=self.direBox.GetValue()
	dataname=self.prefixBox.GetValue()
	offset=int(self.serialBox.GetValue())
	exptime=float(self.exptimeBox.GetValue())
	wavelength=float(self.wavelenBox.GetValue())
	startphi=float(self.oscStartBox.GetValue())
	endphi=float(self.oscEndBox.GetValue())
	stepphi=float(self.oscStepBox.GetValue())
	cl=float(self.camelenBox.GetValue())
	attidx=self.attPullDown.GetCurrentSelection()

	return dir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx

    def pushOutput(self, event): # wxGlade: MyFrame2.<event_handler>
	# Constructor
	bsssch=ScheduleBSS()

	# Schedule file parameters
	dir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx=self.getScheduleParams()

	# Setting Schedule
	# directory
	bsssch.setDir(dir)
	# dataname
	bsssch.setDataName(dataname)
	# Serial offset
	bsssch.setOffset(offset)
	# Exp time
	bsssch.setExpTime(exptime)
	# wavelength
	bsssch.setWL(wavelength)
	# distance
	bsssch.setCameraLength(cl)
	# attenuator
	bsssch.setAttIdx(attidx)

        state=self.checkbox_1.GetValue()
	if state:
		#
		# Advanced mode
		# Check advanced condition
		self.checkAdvanced()
		# step [mm]	
		astep_mm=float(self.advancedStepBox.GetValue())/1000.0
		step_num=int(self.advPointBox.GetValue())
		# frames/point
		ainterval=int(self.advFramePerPoint.GetValue())
		bsssch.setAdvanced(step_num,astep_mm,ainterval)
		# startvec
		startxyz=[sx,sy,sz]
		# end vec
		endxyz=[ex,ey,ez]
		bsssch.setAdvancedVector(startxyz,endxyz)
		# Schedule file parameters
		dir,dataname,offset,exptime,wavelength,startphi,endphi,stepphi,cl,attidx=self.getScheduleParams()
		# Scan condition
		bsssch.setScanCondition(startphi,endphi,stepphi)
	else:
		# Scan condition
		bsssch.setScanCondition(startphi,endphi,stepphi)

	ofile="/isilon/users/target/target/yaruzo.sch"
	bsssch.make(ofile)

    def phiP90(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=90
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def phiM90(self, event): # wxGlade: MyFrame2.<event_handler>
        rot_ang=-90
        self.gonio.rotatePhiRelative(rot_ang)
        self.transUpdate()

    def pushOrigVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.OrigXbox.SetValue(xmmstr)
		self.OrigYbox.SetValue(ymmstr)
		self.OrigZbox.SetValue(zmmstr)

    def pushSlowVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.SlowXbox.SetValue(xmmstr)
		self.SlowYbox.SetValue(ymmstr)
		self.SlowZbox.SetValue(zmmstr)

    def pushFastVec(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)

		xmmstr="%8.4f"%xmm
		ymmstr="%8.4f"%ymm
		zmmstr="%8.4f"%zmm
		
		self.FastXbox.SetValue(xmmstr)
		self.FastYbox.SetValue(ymmstr)
		self.FastZbox.SetValue(zmmstr)

    def get2Dvectors(self):
		# original vector
		ox=float(self.OrigXbox.GetValue())
		oy=float(self.OrigYbox.GetValue())
		oz=float(self.OrigZbox.GetValue())
		ov=[ox,oy,oz]

		# slow vector
		sx=float(self.SlowXbox.GetValue())
		sy=float(self.SlowYbox.GetValue())
		sz=float(self.SlowZbox.GetValue())
		sv=[sx,sy,sz]

		# fast vector
		fx=float(self.FastXbox.GetValue())
		fy=float(self.FastYbox.GetValue())
		fz=float(self.FastZbox.GetValue())
		fv=[fx,fy,fz]

		print ov,sv,fv
		return ov,sv,fv

    def setVecA(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                print xstr,ystr,zstr
                self.vecAXbox.SetValue(xstr)
                self.vecAYbox.SetValue(ystr)
                self.vecAZbox.SetValue(zstr)

    def setVecB(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                print xstr,ystr,zstr
                self.vecBXbox.SetValue(xstr)
                self.vecBYbox.SetValue(ystr)
                self.vecBZbox.SetValue(zstr)

    def setVecD(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                print xstr,ystr,zstr
                self.vecDXbox.SetValue(xstr)
                self.vecDYbox.SetValue(ystr)
                self.vecDZbox.SetValue(zstr)

    def setVecG(self, event): # wxGlade: MyFrame2.<event_handler>
        if self.selected!=-1:
                xstr=self.list_ctrl_1.GetItem(self.selected,0).GetText()
                ystr=self.list_ctrl_1.GetItem(self.selected,1).GetText()
                zstr=self.list_ctrl_1.GetItem(self.selected,2).GetText()
                print xstr,ystr,zstr
                self.vecGXbox.SetValue(xstr)
                self.vecGYbox.SetValue(ystr)
                self.vecGZbox.SetValue(zstr)

    def clearAll(self, event): # wxGlade: MyFrame2.<event_handler>
                self.vecAXbox.SetValue("")
                self.vecAYbox.SetValue("")
                self.vecAZbox.SetValue("")
                self.vecBXbox.SetValue("")
                self.vecBYbox.SetValue("")
                self.vecBZbox.SetValue("")
                self.vecDXbox.SetValue("")
                self.vecDYbox.SetValue("")
                self.vecDZbox.SetValue("")
                self.vecGXbox.SetValue("")
                self.vecGYbox.SetValue("")
                self.vecGZbox.SetValue("")


    def saveGlistToFile(self, event): # wxGlade: MyFrame2.<event_handler>
        # Home directory
        #home_dir=os.environ['HOME']
        home_dir="/data3/goniolist"
        nowtime="%s"%datetime.datetime.now()
        nowtime=nowtime.replace(" ","-").replace(":","")
        nowtime=nowtime[:nowtime.rfind(".")]
        print nowtime
        ofile="%s/gonio-%s.dat"%(home_dir,nowtime)
        print ofile
        #print self.list_ctrl_1.GetColumnCount()
        nlist=self.list_ctrl_1.GetItemCount()
        outf=open(ofile,"w")
        for idx in arange(0,nlist):
                xstr=self.list_ctrl_1.GetItem(idx,0).GetText()
                ystr=self.list_ctrl_1.GetItem(idx,1).GetText()
                zstr=self.list_ctrl_1.GetItem(idx,2).GetText()
                comment=self.list_ctrl_1.GetItem(idx,3).GetText()

                xmm=float(xstr)
                ymm=float(ystr)
                zmm=float(zstr)
                outf.write("%10.4f %10.4f %10.4f %s\n"%(xmm,ymm,zmm,comment))
        outf.close()

    def prepCentering(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `prepCentering' not implemented"
        event.Skip()

    def pushLightDown(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `pushLightDown' not implemented"
        event.Skip()

    def pushWithCryoZ(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `pushWithCryoZ' not implemented"
        event.Skip()

    def pushWithLight(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `pushWithLight' not implemented"
        event.Skip()

    def tenoseDo(self, event): # wxGlade: MyFrame2.<event_handler>
        print "Event handler `tenoseDo' not implemented"
        event.Skip()

    def pushMakeList(self, event): # wxGlade: MyFrame2.<event_handler>
	# Directory setting
        directory=self.datadireBox.GetValue()
	# Prefix
	prefix=self.prefixBox.GetValue()
	# Phi
	phistart=float(self.startPhiBox.GetValue())
	dphi=float(self.deltaPhiBox.GetValue())
	# Step for irradiation points setting
	vstep=float(self.vstepBox.GetValue())
	hstep=float(self.hstepBox.GetValue())
	# Vector A,B,D,G getting [mm -> um]
	ax=float(self.vecAXbox.GetValue())*1000.0
	ay=float(self.vecAYbox.GetValue())*1000.0*-1.0
	az=float(self.vecAZbox.GetValue())*1000.0*-1.0
	vecA=array([ax,ay,ax])
	
	bx=float(self.vecBXbox.GetValue())*1000.0
	by=float(self.vecBYbox.GetValue())*1000.0*-1.0
	bz=float(self.vecBZbox.GetValue())*1000.0*-1.0
	vecB=array([bx,by,bx])
	
	dx=float(self.vecDXbox.GetValue())*1000.0
	dy=float(self.vecDYbox.GetValue())*1000.0*-1.0
	dz=float(self.vecDZbox.GetValue())*1000.0*-1.0
	vecD=array([dx,dy,dx])

	gx=float(self.vecGXbox.GetValue())*1000.0
	gy=float(self.vecGYbox.GetValue())*1000.0*-1.0
	gz=float(self.vecGZbox.GetValue())*1000.0*-1.0
	vecG=array([gx,gy,gx])

	self.cry=Crystal()
	self.cry.init(vecA,vecB,vecD,vecG,vstep,hstep)
	self.cry.makeInitialVecs(phistart,dphi)

        for i in range(0,self.cry.getNplanes()+1):
             tpl=self.cry.getConditionAt(i)
             idx,nf,sx,sy,sz,ex,ey,ez,phistart,phiend,lenvec,lenstep=tpl
             #print tpl
             print "%5d %5d %8.2f %8.2f\n"%(idx,nf,phistart,phiend),
		
    def pushQuit(self, event): # wxGlade: MyFrame2.<event_handler>
	self.s.close()

# end of class MyFrame2

if __name__ == "__main__":
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_3 = MyFrame2(None, -1, "")
    app.SetTopWindow(frame_3)
    frame_3.Show()
    app.MainLoop()

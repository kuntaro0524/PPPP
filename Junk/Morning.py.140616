import socket
import time
import datetime

# My library
from Mono import *
from FES import *
from ID import *
from TCS import *
from ExSlit1 import *
from File import *
from Att import *
from SPACE import *
from MyException import *
from BM import *
from BS import *
from Stage import *
from Shutter import *
from Capture import *
from Gonio import *
from Colli import *
from Cryo import *
from CenteringNeedle import *
from Zoom import *
from MountPin import *
from Count import *
from FindNeedle import *
from CCDlen import *
from Cover import *
from Light import *
from CoaxYZ import *
from NeedlePicture import *
from AxesInfo import *

class Morning:
	def __init__(self,path):
		host = '192.168.163.1'
		port = 10101
		self.s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.s.connect((host,port))

		# Devices
		self.id=ID(self.s)
		self.mono=Mono(self.s)
		self.tcs=TCS(self.s)
		self.f=File(path)
		self.att=Att(self.s)
		#self.space=SPACE()
		self.bm=BM(self.s)
		self.stage=Stage(self.s)
		self.shutter=Shutter(self.s)
		self.cap=Capture()
		self.colli=Colli(self.s)
		self.bs=BS(self.s)
		self.gonio=Gonio(self.s)
		self.cryo=Cryo(self.s)
		self.zoom=Zoom(self.s)
		self.slit1=ExSlit1(self.s)
		self.clen=CCDlen(self.s)
		self.covz=Cover(self.s)
		self.light=Light(self.s)
		self.coaxYZ=CoaxYZ(self.s)
		
		# current directory
		self.curr_dir=self.f.getAbsolutePath()
		print self.curr_dir

############################
# Axes information
############################
	def axesInfo(self):
		prefix="%03d"%self.f.getNewIdx3()
		ax=AxesInfo(s)

		ofile=prefix+"_axes.dat"   #hashi 100615
		ax.all(ofile)              #hashi 100615

############################
### OPTICS PART
############################

        def changeE(self,energy):
		print "Energy is changed to %8.5f keV"%energy
		# Energy change
		self.mono.changeE(energy)
		# Gap
                self.id.moveE(energy)

	def dttunePeak(self):
		prefix="%03d"%(self.f.getNewIdx3())
		# Delta theta1 tune
		fwhm,center=self.mono.scanDt1PeakConfig(prefix,"DTSCAN_NORMAL",self.tcs)
		return fwhm,center

############################
### STAGE TUNE
############################
	def stageYtuneCapture(self):
		# Tuning the gain of coax-camera
		try: 
			gain=self.cap.tuneGain()
		except MyException,ttt:
			raise MyException("gain tuning failed: %s\n"%ttt.args[0])

		# Zoom in
		self.zoom.zoomIn()

        	# Center cross in [pix]
        	ceny=320
        	cenz=240
		
		# Get current position [um]
		curr_pos=self.stage.getYmm()

		for i in range(0,10):
			print "Current stageY=%12.5f"%self.stage.getYmm()
			prefix="%s/%03d_sty_%02d"%(self.curr_dir,self.f.getNewIdx3(),i)
			# caputure and analyze
			y,z=self.cap.aveCenter(prefix,gain)

			# diff x,y
			dy=y-ceny

			# pixel to micron [um/pixel] in high zoom
			p2u_y=9.770E-2

			y_move=dy*p2u_y

			print "Stage Y movement: %8.4f [um]"%y_move

			if math.fabs(y_move) < 0.5:
				print "Tune is successfully done.\n"
				break
			if math.fabs(y_move) > 100:
			        raise MyException("Stage movement is too large Y:%8.4f\n"%(y_move))

			self.stage.moveYum(y_move)
			time.sleep(3)

		# Get current position [um]
		fin_pos=self.stage.getYmm()

		return curr_pos,fin_pos

##########################
### Needle centering
##########################
	def needleXcenter(self):
	##	Attenuator set to 600um
		self.setAtt(600)
	##	Device definition
		conf=ConfigFile()
	
	##	Counter channel
		cnt_ch1=3
		cnt_ch2=1 #PSIC
		counter=Count(self.s,3,1)
	
	##	Gonio phi list
		phi_list=[(0,180),(90,270)]
	
	##	Save Gonio position
		sx,sy,sz=self.gonio.getXYZmm()
	
	## 	Wire scan
		rough_radius=80.0 # [um]
		gstep=1.0 #[um]
		nstep=int(rough_radius/gstep)
	
       		oname="%03d_scan.dat"%(self.f.getNewIdx3())
		ofile=open(oname,"w")
       		oname="%03d_result.dat"%(self.f.getNewIdx3())
		sfile=open(oname,"w")
	
		while(1):
			finish_flag=0
			for phi_pair in phi_list:
				idx=0
				ox,oy,oz=self.gonio.getXYZmm()
				for phi in phi_pair:
					self.gonio.rotatePhi(phi)
					gstep=1.0 # [um]
			
					print "Scan at rotation=",phi,"[deg.]"
					# PREFIX
					prefix2="phi_%07.2fdeg_%08.4f"%(phi,sy)
       					prefix="%03d_%s"%(self.f.getNewIdx3(),prefix2)
					outfile=prefix+"_gonioV.scn"
			
					# Gonio Z scan range
					print "Scan STARTED"
					self.gonio.scanVert2(prefix,-50,50,1,cnt_ch1,cnt_ch2,0.1)
					print "Scan FINISHED"
		
					# Analyze
					ana=AnalyzePeak(outfile)
					outfig="%s_gonioV.png"%prefix
					comment="GONIO V SCAN"
					fwhm,center=ana.analyzeAll("gonioV[mm]","Intensity",outfig,comment,"OBS","FCEN")
					print "Needle shade FWHM = %8.5f[um] CENTER=%8.5f[um]"%(fwhm,center)
		
					# Encoder value
					x,y,z=self.gonio.getXYZmm()
					ex,ey,ez=self.gonio.getEnc()
		
					ofile.write("%8.3f %10.3f %8.3f %10.5f%10.5f%10.5f%10.5f%10.5f%10.5f\n"
						%(fwhm,center,phi,x,y,z,ex,ey,ez))
					ofile.flush()
			
					if idx==0:
						orig=center
					else:
						reve=center
					idx+=1
	
				## Gonio to saved position
				self.gonio.moveXYZmm(ox,oy,oz)
				chuten=(orig+reve)/2.0
				zure=chuten-reve
				print "CHUTEN,ZURE",chuten,zure
				self.gonio.moveUpDown(-zure)
		
				x,y,z=self.gonio.getXYZmm()
				ex,ey,ez=self.gonio.getEnc()
				no=datetime.datetime.now()
		
				# PSIC
				itime=10.0
				psic=int(counter.getCount(itime)[1])
				psic_pos=psic/100.0/itime*37/75 #[um]
	
				sfile.write("%20s %10.5f%10.5f%10.5f%10.5f%10.5f%10.5f %10.5f%10.2f%10.5f\n"
					%(no,x,y,z,ex,ey,ez,chuten,psic_pos,zure))
				sfile.flush()
	
				# is finished?
				if math.fabs(zure)<0.5:
					finish_flag+=1
				if finish_flag==2:
					break
			if finish_flag==2:
				break
			ofile.close()
			sfile.close()
			break
		return ex,ey,ez

	def scanZZneedleX(self):
		counter=Count(self.s,3,1)
		# Wire scan
		oname="%03d_zz.dat"%(self.f.getNewIdx3())
		ofile=open(oname,"w")

		#self.gonio.moveZZpulse(4538)

		savep=self.gonio.getZZ()
		print savep

		max=-99999.99999
		for rel in arange(-50,50,1):
			target=savep+rel
			self.gonio.moveZZpulse(target)
			cnt=counter.getCount(0.1)[0]
			ofile.write("1245 %10d %10d 1245\n"%(target,cnt))
			print "ZZ=%5d CPS=%5d"%(target,cnt*10)
			ofile.flush()

		self.gonio.moveZZpulse(savep)
		ofile.close()
		# Analyze
		ana=AnalyzePeak(oname)
		outfig="%03d_zz.png"%(self.f.getNewIdx3())
		comment="GONIO V SCAN"
		fwhm,center=ana.analyzeAll("gonioV[mm]","Intensity",outfig,comment,"OBS","FCEN")
		print "FWHM = %8.5f CENTER=%8.5f "%(fwhm,center)

		# Move
		# 1um down Y.Kawano's result on 2014/05/28
		# gonioZZ 0.5 um/pls
		move_pos=int(center)-2
		self.gonio.moveZZpulse(move_pos)
		fin_pos=self.gonio.getZZ()
		print "Final position=",fin_pos
		return int(fin_pos)

	def getNeedleZcenter(self,filename):
		self.cap.capture(filename,1200)
                np=NeedlePicture(filename)
                fwhm,center=np.getCenterFWHM()
                return fwhm,center

        def tuneCoaxZ(self,offset):
		# offset : 1um up 140611@BL32XU # UNIT [pulse]
		# 1um = 2pls

		init_pos=self.coaxYZ.getZ()

		# Zoom in
		self.zoom.zoomIn()
		self.light.on()

		savep=self.coaxYZ.getZ()
		sum=0.0
		# Prefix of captured files

		for i in range(0,5):
			filename="%s/%03d_coaxz_%02d.ppm"% \
				(self.curr_dir,self.f.getNewIdx3(),i)
			fwhm,center=self.getNeedleZcenter(filename)
			print center
			sum+=center

		center=sum/5.0
		print "FWHM Averaged.CENTER:",fwhm,center

		diff=center-240
		print "CENTER ZURE",diff
		pix2um_highz=0.07125   # [um/pixel]
		diff_um=diff*pix2um_highz
		print "Difference from center cross: %5.2f[um]"%diff_um

		# Coax Z PULSE
		#target=savep+relmove Y.Kawano
		relmove=int(diff_um/0.5)
		target=savep-relmove+offset
		print "Moving to %5d"%target
		self.coaxYZ.moveZ(target)
		self.cap.disconnect()
		
		final_pos=self.coaxYZ.getZ()
		print "Final position=",final_pos
		return init_pos,final_pos

##########################
### Scan related
##########################

	def prepScan(self):
		# CCD Evacuation
		self.clen.evac()
		# Cover on
		self.covz.on()

		if self.covz.isCover():
			print "Slit1 open"
			self.slit1.openV()
			print "Light down"
			self.light.off()
			print "Shutter open"
			self.shutter.open()
		print "Ready..."

	def finishExposure(self):
		# Shutter close
		time.sleep(1.0)
		self.shutter.close()
		print "Slit1 close"
		self.slit1.closeV()
		# Cover on
		self.covz.off()
		print "Goto experiments!!"

	def evacNeedle(self,evac_mm):
		x,y,z=self.gonio.getXYZmm()
		ynew=y+evac_mm
		self.gonio.moveXYZmm(x,ynew,z)
		return x,y,z

	def moveXYZmm(self,x,y,z):
		self.gonio.moveXYZmm(x,y,z)

	def prepBC(self):
		self.bm.onPika()

	def finishBC(self):
		self.bm.offXYZ()
		
	def allFin(self):
		self.s.close()

######################
## Capture beam position & Analyze only
######################

	def doCapAna(self,prefix):
		# Zoom in
		self.zoom.zoomIn()

        	# Center cross in [pix]
        	ceny=320
        	cenz=240

		prefix="%s/%03d_%s"%(self.curr_dir,self.f.getNewIdx3(),prefix)

		# Tuning the gain of coax-camera
		try: 
			gain=self.cap.tuneGain()
		except MyException,ttt:
			raise MyException("gain tuning failed: %s\n"%ttt.args[0])

        	for i in range(0,5):
                	# caputure and analyze
               		y,z=self.cap.aveCenter(prefix,gain)
	
                	# diff x,y
                	dy=y-ceny
                	dz=z-cenz
	
                	# pixel to micron [um/pixel] in high zoom
                	p2u_z=7.1385E-2
                	p2u_y=9.770E-2
	
                	z_move=-dz*p2u_z
                	y_move=dy*p2u_y
	
                	print "Z: %8.4f [um]"%z_move
                	print "Y: %8.4f [um]"%y_move

			if math.fabs(z_move) < 0.5 and math.fabs(y_move) < 0.5:
				print "Tune is enough!!\n"
				break
			if math.fabs(z_move) > 500 or math.fabs(y_move) > 500:
				raise MyException("Stage movement is too large z:%8.4f y:%8.4f\n"%(z_move,y_move))
	
			time.sleep(3)

	def colliScan(self):
		prefix="%03d"%self.f.getNewIdx3()
		self.colli.scan(prefix,3)
		trans,pin=self.colli.compareOnOff(3)
		print "Transmission %5.2f percent (Counter:%d)\n"%(trans,pin)
	
	def setAtt(self,thickness):
		# Configuration of Attenuator
		self.att.init()
		self.att.setAttThick(thickness)

if __name__=="__main__":
	mng=Morning("./")

	ox=-0.3120
	oy=0.4577
	oz=1.3964

	#mng.moveXYZmm(ox,oy,oz)
	# Evacuate needle
	#sx,sy,sz=mng.evacNeedle(15)

	mng.prepBC()
	mng.setAtt(1000)

	#time.sleep(120.0)

	mng.prepScan()
	mng.stageYtuneCapture()
	#mng.doCapAna("captest")
	mng.finishBC()


	mng.finishExposure()
	#Move to the save position
	#mng.moveXYZmm(ox,oy,oz)

	mng.allFin()

#!/bin/env python 
import sys
import socket
import time

# My library
from AnalyzePeak import *
from Motor import *
from AxesInfo import *

class Mono:
 
    def __init__(self,srv):
	self.m_dtheta1=Motor(srv,"bl_32in_tc1_stmono_1_dtheta1","pulse")
	self.m_theta=Motor(srv,"bl_32in_tc1_stmono_1","pulse")
	self.m_thetay1=Motor(srv,"bl_32in_tc1_stmono_1_thetay1","pulse")
	self.m_zt=Motor(srv,"bl_32in_tc1_stmono_1_zt","pulse")
	self.m_z2=Motor(srv,"bl_32in_tc1_stmono_1_z2","pulse")

	self.m_energy=Motor(srv,"bl_32in_tc1_stmono_1","kev")
	self.m_wave=Motor(srv,"bl_32in_tc1_stmono_1","angstrom")
	self.s=srv

    def getE(self):
	return(self.m_energy.getEnergy()[0])

    def changeE(self,energy):
    	self.m_energy.move(energy)

    def changeWL(self,wavelength):
    	self.m_wave.move(wavelength)

    def moveDt1(self,position):
	self.m_dtheta1.move(position)

    def moveDt1Rel(self,value):
	self.m_dtheta1.relmove(value)

    def moveTy1(self,position):
	self.m_thetay1.move(position)

    def moveZ2(self,position):
	self.m_z2.move(position)

    def moveZt(self,position):
	if position < -5000 or position > 5000:
		print "Zt error!"
		return False

	self.m_zt.move(position)

    def scanEnergy(self,prefix,start,end,step,cnt_ch1,cnt_ch2,time):
	# Setting
	ofile=prefix+"_escan.scn"

	# Condition
	self.m_energy.setStart(start)
	self.m_energy.setEnd(end)
	self.m_energy.setStep(step)
    	maxval=self.m_energy.axisScan(ofile,cnt_ch1,cnt_ch2,time)

    def scanDt1(self,prefix,start,end,step,cnt_ch1,cnt_ch2,time):
	# Setting
        ofile=prefix+"_dtheta1.scn"

	# Condition
	self.m_dtheta1.setStart(start)
	self.m_dtheta1.setEnd(end)
	self.m_dtheta1.setStep(step)

    	maxval=self.m_dtheta1.axisScan(ofile,cnt_ch1,cnt_ch2,time)

        # Analysis and Plot
        outfig=prefix+"_dtheta1.png"
        ana=AnalyzePeak(ofile)
        comment=AxesInfo(self.s).getLeastInfo()
        #comment="during debugging : sorry...\n"

        fwhm,center=ana.analyzeAll("dtheta1[pulse]","Intensity",outfig,comment,"OBS","FCEN")

	self.m_dtheta1.move(int(center))
	return fwhm,center

    def scanDt1Peak_obsoleted(self,prefix,start,end,step,cnt_ch1,cnt_ch2,time):
	# Setting
        ofile=prefix+"_dtheta1.scn"

	# Condition
	self.m_dtheta1.setStart(start)
	self.m_dtheta1.setEnd(end)
	self.m_dtheta1.setStep(step)

    	maxval=self.m_dtheta1.axisScan(ofile,cnt_ch1,cnt_ch2,time)

	counter_1_max=maxval[0]

        # Analysis and Plot
        outfig=prefix+"_dtheta1.png"
        ana=AnalyzePeak(ofile)
        comment=AxesInfo(self.s).getLeastInfo()
        fwhm,center=ana.analyzeAll("dtheta1[pulse]","Intensity",outfig,comment,"OBS","PEAK")

	self.m_dtheta1.move(int(counter_1_max)+1000)
	self.m_dtheta1.move(int(counter_1_max))
	return fwhm,center

    def scanDt1Peak(self,prefix,start,end,step,cnt_ch1,cnt_ch2,sec):
        # Setting
        ofile=prefix+"_dtheta1.scn"

        # Condition
        self.m_dtheta1.setStart(start)
        self.m_dtheta1.setEnd(end)
        self.m_dtheta1.setStep(step)

	backlash=2000

        maxval=self.m_dtheta1.axisScan(ofile,cnt_ch1,cnt_ch2,sec)

        counter_1_max=maxval[0]
	print "Peak: %5d\n"%counter_1_max

        # Analysis and Plot
        outfig=prefix+"_dtheta1.png"
        ana=AnalyzePeak(ofile)
        comment=AxesInfo(self.s).getLeastInfo()
        fwhm,center=ana.analyzeAll("dtheta1[pulse]","Intensity",outfig,comment,"OBS","PEAK")

	# back lash position
	bl_pos=counter_1_max-backlash

	# back lash
        self.m_dtheta1.move(bl_pos)
	n_move=backlash/step

	# Setting the actual value
	for i in range(0,n_move):
        	self.m_dtheta1.relmove(step)

	#print self.m_dtheta1.getPosition()

        return fwhm,center
  
if __name__=="__main__":
	host = '172.24.242.41'
	port = 10101
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((host,port))
	
	mono=Mono(s)
    	#mono.scanDt1Peak("test",-88000,-83000,20,0,3,0.2)
	print mono.getE()

	s.close()
